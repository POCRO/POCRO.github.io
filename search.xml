<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>demo</title>
    <url>/2023/09/02/demo/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. <span id="more"></span></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>开关电路及其仿真</title>
    <url>/2023/09/02/%E5%BC%80%E5%85%B3%E7%94%B5%E8%B7%AF%E5%8F%8A%E5%85%B6%E4%BB%BF%E7%9C%9F/</url>
    <content><![CDATA[<ol>
<li><p>开关电路的介绍</p>
<p>可以在很高的效率下完成电压的升降 常用的有BUCK BOOST电路</p>
<p>开关电路一般来说只适用于高频电路</p>
</li>
<li><p>BUCK电路</p>
</li>
</ol>
<p>通过开关MOSEFT管的占空比来调节整个PWM波的占空比，再加上电感电容的高通滤波器，就可以输出稳定的降压</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261132218.png"
                      alt="image-20230801160945792"
                ></p>
<ol start="3">
<li><p>BOOST简化电路</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261132382.png"
                      alt="image-20230801161121460"
                ></p>
</li>
</ol>
<p>[1]: <a class="link"   href="https://blog.csdn.net/lg2lh/article/details/24369903" >https://blog.csdn.net/lg2lh/article/details/24369903 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>	“”关于伏秒平衡””</p>
<p><a class="link"   href="https://blog.csdn.net/weixin_43381663/article/details/129694870" >【电源】DC-DC电路中的伏秒平衡原理 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>利用好第一阶段给电感储能，再在第二阶段使得电感和电源同时给输出端提供电压，使得输出电压要更大。而在第一阶段中，输出电压就由电容来维持</p>
<ol start="4">
<li><p>BUCK-BOOST电路</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261133846.png"
                      alt="image-20230801162509696"
                ></p>
</li>
</ol>
<p>可以方便地调节了</p>
<p>若一直关闭Q8打开Q7，则成为BUCK电路</p>
<p>若一直关闭Q5打开Q6，则称为BOOST电路</p>
<blockquote>
<p>桥臂在电源端就是BUCK,在输出端就是BOOST</p>
</blockquote>
]]></content>
      <tags>
        <tag>电子技术</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言的多文件编程</title>
    <url>/2023/09/02/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<ol>
<li><p>多文件编程原理</p>
<p> C++在编译多文件程序时，首先将每一个文件单独编译，然后通过链接将各个文件组合成一个可执行程序</p>
<p> 可以将函数的声明放到头文件中去，而在主文件中引用头文件就相当于将头文件中内容拷贝到主文件中再进行编译</p>
<p> <a class="link"   href="https://blog.csdn.net/chen_z_p/article/details/105352547" >我终于把C++多文件编程理解透彻了-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>关于头文件</p>
<p> 后缀为 .h 的文件，<mark>记得将其放置在条件编译预处理语句中 </mark>，防止因为依赖关系被多次包含</p>
</li>
</ol>
<p>​		函数声明：显然应该放在头文件中，前面很清楚。<br>​		类定义、结构定义：用函数定义的逻辑想，似乎不能放在头文件中。但它<mark>应该放在头文件</mark>。第一，每个cpp文件应该有一个定义，	在编译的时候编译器才知道怎么为对象分配空间。其次，类型定义不会在内存上分配空间。  </p>
<p>​		模板函数：编译器必须在编译的时候根据函数模板实例化对应的函数，所以应该放在头文件。   </p>
<p>​		内联函数：编译期间被插到调用位置，所以也要放在头文件。</p>
<p>​		<mark>函数定义：不要！</mark>C++规定一个程序同签名的函数只能有一个定义。如果你把函数定义放在头文件，并且同一个程序的多个cpp	文件包含了该头文件，这样，在链接的时候会发现多个定义版本，链接报错。</p>
<p>​		<mark>变量定义：不要！</mark>与上面类似，被多个文件包含的时候会出现多次定义同一个变量，链接错误。但是，static变量和extern变量 	可以，以及宏定义的常量，因为这些在多个文件出现并不会出错。</p>
<ol start="3">
<li><p>使用命令行运行多文件项目</p>
 <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">g++ main.cpp fun.cpp -o out   #列举所有要编译的文件</span><br></pre></td></tr></table></figure></div>

</li>
<li><p>使用  vscode 编译多文件项目</p>
<p> 在安装好一众插件的 vscode 环境中，在主文件开头使用 #include “” 的方式来引入头文件和预编译文件</p>
 <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*实例项目*/</span></span><br><span class="line"><span class="comment">// main.c   主文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;print.h&quot;</span>      <span class="comment">//这个里面放所有的函数声明和库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;print.c&quot;</span>      <span class="comment">//这里面放所有的函数定义</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Print(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fuction.c  用来放所有函数的定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;function.h&quot;</span>		<span class="comment">//记得要引入头文件</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//function.h	这个头文件用来声明函数，应用包</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>          </span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HEAD_H					<span class="comment">//条件编译预处理语句</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEAD_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p> 最后直接在主文件中运行就可以了</p>
</li>
<li><p>使用 cmake 编译多文件项目</p>
</li>
<li><p>多文件编程中 extern 的使用</p>
</li>
</ol>
<p>extern表示改变量是定义在其他文件中的，在多文件情况下最标准的方式是：</p>
<p>在 .c文件中声明变量， 在其对应的 .h 文件中使用extern声明变量，这样其他地方要用这个变量时只需要 include 一下这个 .h文件即可</p>
<blockquote>
<p>注意！在.c中声明变量是可以顺便初始化值，但extern的时候就不要这么干了不然会显示重复定义！</p>
</blockquote>
]]></content>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora 笔记</title>
    <url>/2023/09/02/Typora%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h4><p>按下ctrl+1~可以输入六级大小的标题</p>
<h4 id="2-分隔符"><a href="#2-分隔符" class="headerlink" title="2. 分隔符"></a>2. 分隔符</h4><p>按下 *** +++ — 都可以创造一个分隔符</p>
<hr>
<p>+++</p>
<hr>
<h4 id="3-下划线"><a href="#3-下划线" class="headerlink" title="3. 下划线"></a>3. 下划线</h4><p><u>按下 ctrl + u</u></p>
<h4 id="4-删除线"><a href="#4-删除线" class="headerlink" title="4. 删除线"></a>4. 删除线</h4><p>文字前后都加上 ~~   <del>就像这样</del></p>
<h4 id="5-斜体"><a href="#5-斜体" class="headerlink" title="5. 斜体"></a>5. 斜体</h4><p>文字前后都加上 一个 *	<em>就像这样</em></p>
<p>快捷键是 ctrl + i</p>
<h4 id="6-加粗"><a href="#6-加粗" class="headerlink" title="6. 加粗"></a>6. 加粗</h4><p>文字前后都加上两个 *  	<strong>就像这样</strong></p>
<p>或者直接 ctrl+ 文字	就像这样</p>
<h4 id="7-高亮"><a href="#7-高亮" class="headerlink" title="7. 高亮"></a>7. 高亮</h4><p>文字前后都加上&#x3D;&#x3D; 			&#x3D;&#x3D;就像这样&#x3D;&#x3D;</p>
<h4 id="8-下标"><a href="#8-下标" class="headerlink" title="8. 下标"></a>8. 下标</h4><p>就像这样 	H<del>2</del>O  在 H 和O之间加上~</p>
<h4 id="9-上标"><a href="#9-上标" class="headerlink" title="9. 上标"></a>9. 上标</h4><p>就像这样 		i^2^	在 i  和 2 后面都加上~</p>
<h4 id="10-引用"><a href="#10-引用" class="headerlink" title="10. 引用"></a>10. 引用</h4><p>就用一个大于号</p>
<blockquote>
<p>就像这样  </p>
</blockquote>
<h4 id="11-特殊语法块（代码块）"><a href="#11-特殊语法块（代码块）" class="headerlink" title="11. 特殊语法块（代码块）"></a>11. 特殊语法块（代码块）</h4><p>用三个 &#96;&#96;&#96; 再加上代码种类</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="12-链接"><a href="#12-链接" class="headerlink" title="12. 链接"></a>12. 链接</h4><p>​	1. 外部链接</p>
<p>​				[ ] 里面加上链接显示的名称，后面的 ( ) 里面加上链接本体	<a href="%5B(8%E6%9D%A1%E6%B6%88%E6%81%AF">本笔记原来源</a> Typora一站式使用教程，成为Markdown大佬，看这一篇就够了_typora用来干什么_飞Link的博客-CSDN博客](<a class="link"   href="https://blog.csdn.net/feizuiku0116/article/details/119898062" >https://blog.csdn.net/feizuiku0116/article/details/119898062 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>))</p>
<ol start="2">
<li><p>内部链接跳转</p>
<p>​		[ ] 里面加上链接显示的名称，后面的 ( ) 里面加上链接本体, 比如标题##啥啥 [12节链接](# 12.链接)</p>
</li>
</ol>
<h4 id="13-图片"><a href="#13-图片" class="headerlink" title="13. 图片"></a>13. 图片</h4><p>[ ] 里面加上链接显示的名称，后面的 ( ) 里面加上图片链接或者本地存储路径</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261131214.png"
                      alt="2023-07-21_085124-16899007513061"
                ></p>
<h4 id="14-typora-的-css-美化"><a href="#14-typora-的-css-美化" class="headerlink" title="14. typora 的 css 美化"></a>14. typora 的 css 美化</h4><p>在typora的文件-&gt;偏好设置-&gt;外观-&gt;主题中可以选择心仪的主题，而主题可以在 Typora皮肤官网下载（记得使用魔法）。</p>
<p>而皮肤的安装可以在主题选项中打开主题文件夹，把主题的css 文件直接 copy过去即可~</p>
<p>关于 css 的自己美化和设置，有待学习，但似乎已经存在的主题已经足够好看</p>
]]></content>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>CAN通信讲义</title>
    <url>/2023/09/11/CAN%E9%80%9A%E8%AE%AF/</url>
    <content><![CDATA[<h2 id="不错的参考博客"><a href="#不错的参考博客" class="headerlink" title="不错的参考博客"></a>不错的参考博客</h2><p><a class="link"   href="https://blog.csdn.net/XiaoXiaoPengBo/article/details/116206252?ops_request_misc=%7B%22request_id%22:%22163559744416780271593574%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163559744416780271593574&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116206252.pc_search_result_control_group&utm_term=can&spm=1018.2226.3001.4187" >秀！靠这篇我竟然2天理解了CAN协议！实战STM32F4 CAN！_can通信协议简单理解_Wireless_Link的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1Dq4y1J7WA/?from=search&seid=54886702141269529&spm_id_from=333.337.0.0" >CAN通信速成！从会到不会~_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_44793491/article/details/107298426" >CAN通信知识梳理及在Stm32上的应用（HAL库）_冬瓜~的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><h3 id="1-CAN通信物理层"><a href="#1-CAN通信物理层" class="headerlink" title="1.CAN通信物理层"></a>1.CAN通信物理层</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261142732.png"
                      alt="image-20250126114246686"
                ></p>
<p>具体实现</p>
<p>CAN控制器：STM32F407等MCU上自带的CAN控制器</p>
<p>CAN收发器：SN65HVD230芯片,CA-IS3052G隔离式 <a class="link"   href="https://item.szlcsc.com/548132.html" >CA-IS3052G <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261145381.png"
                      alt="image-20250126114534348"
                ></p>
<h3 id="2-CAN通信帧"><a href="#2-CAN通信帧" class="headerlink" title="2.CAN通信帧"></a>2.CAN通信帧</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261147606.png"
                      alt="image-20250126114754564"
                ></p>
<p>后三种帧是由硬件来完成的，重点关注前两者</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261148542.png"
                      alt="image-20250126114842507"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261148654.png"
                      alt="image-20250126114852613"
                ></p>
<p>ID段：数据的ID号，分为11位的标准格式ID和29位的扩展格式ID</p>
<p>DLC：给定数据长度</p>
<p>CRC：校验段</p>
<h3 id="3-CAN通信的重要基本特征"><a href="#3-CAN通信的重要基本特征" class="headerlink" title="3.CAN通信的重要基本特征"></a>3.CAN通信的重要基本特征</h3><ol>
<li><p>差分信号 </p>
<p>隐形电平对应逻辑 1，两线压差为0，显性电平对应逻辑0，两线压差为2.5V   可以使外界干扰减到很小（抑制共模干扰）</p>
<aside> 💡

<p>双绞线:减小电磁场相互作用</p>
<p>PCB Layout:确保信号传输不出现延时差异，防止出现信号失真或时序问题</p>
</aside>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261150235.png"
                      alt="image-20250126115013194"
                ></p>
</li>
<li><p>终端电阻</p>
<p>120欧 用于减少回波反射</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261153887.png"
                      alt="image-20250126115306798"
                ></p>
<p>多电机模式下设置好电机上的拨档使得终端电阻为120，主控端120欧电阻长期使用后可能掉落，所以最好电表测量实际终端电阻修改对应。</p>
</li>
<li><p>系统的柔软性</p>
<p>与总线相连的单元没有类似于“地址”的信息。因此在总线上增加单元时，连接在总线上的其它单元的软硬件及应用层都不需要改变。</p>
</li>
</ol>
<h3 id="4-CAN在STM32"><a href="#4-CAN在STM32" class="headerlink" title="4.CAN在STM32"></a>4.CAN在STM32</h3><ol>
<li><p>关于采样点和位时序</p>
<p>见STM32F4中文参考手册 P622</p>
<p>一个位相当于是一帧数据，控制位时序相当于就是控制一帧数据的时间长度，再将这个时间长度取倒数就得到了波特率。</p>
<p>这些位都是由最小的时间单元组成，称为一个 time quantum，也就是 1tq</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261157469.png"
                      alt="image-20250126115740427"
                ></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261157188.png"
                      alt="image-20250126115757140"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261158282.png"
                      alt="image-20250126115810229"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261159516.png"
                      alt="image-20250126115936455"
                ></p>
<p>那么在实际程序中，就需要控制好这些位时序使得波特率正确</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">CAN_InitStructure.CAN_SJW=CAN_SJW_1tq;  <span class="comment">//重新同步跳跃宽度(Tsjw)为tsjw+1个时间单位 CAN_SJW_1tq~CAN_SJW_4tq</span></span><br><span class="line">CAN_InitStructure.CAN_BS1=CAN_BS1_10tq;  <span class="comment">//Tbs1范围CAN_BS1_1tq ~CAN_BS1_16tq</span></span><br><span class="line">CAN_InitStructure.CAN_BS2=CAN_BS2_3tq;  <span class="comment">//Tbs2范围CAN_BS2_1tq ~   CAN_BS2_8tq</span></span><br><span class="line">CAN_InitStructure.CAN_Prescaler = <span class="number">3</span>;    <span class="comment">//分频系数(Fdiv)为brp+1</span></span><br></pre></td></tr></table></figure></div>

<p>因为该板子上的 CAN 是挂载在 APB1 时钟上，分频就是 42Mhz，再分完频就是 14Mhz，所以一个 tp 就是 $\frac{1}{14Mhz}$，而在上述代码中设置了总共 14 个 tp，所以一个位的时间长度是 $\frac{1}{1Mhz}$ ，所以波特率就是 1Mhz</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261159516.png"
                      alt="image-20250126115936455"
                ></p>
<p>由上图可以看到，SYNC_SEG 和 BS1 结束后为采样点，一般来说把采样点控制在 80% 左右比较合适</p>
<ol start="2">
<li><p>滤波器</p>
<p><strong>不管是否直接使用滤波器都要配好！</strong></p>
<p>如下图可见，CAN2不能控制筛选器，如果有CAN2的话，在使用CAN2之前一定要先使能 CAN1的时钟    中文参考手册 P609</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261203554.png"
                      alt="image-20250126120322497"
                ></p>
<p>其中筛选器就是用来筛选有着固定ID的信息，减小总线负担</p>
<aside> 💡

<p>CAN1是主CAN,其他的CAN如果没有先使能CAN1就会无法正常运行</p>
</aside></li>
</ol>
]]></content>
      <tags>
        <tag>嵌入式 STM32 CAN</tag>
      </tags>
  </entry>
  <entry>
    <title>光的衍射与干涉装置总结</title>
    <url>/2023/09/02/%E5%85%89%E7%9A%84%E8%A1%8D%E5%B0%84%E4%B8%8E%E5%B9%B2%E6%B6%89%E8%A3%85%E7%BD%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>z</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261109959.png"
                      alt="image-20231016230036374"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261109856.png"
                      alt="image-20231016230053777"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261117800.png"
                      alt="image-20231016230113246"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118971.png"
                      alt="image-20231016230131066"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118930.png"
                      alt="image-20231016230143484"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118958.png"
                      alt="image-20231016230156475"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118801.png"
                      alt="image-20231016230206976"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118392.png"
                      alt="image-20231016230226804"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118306.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261119776.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261119980.png"
                     
                ></p>
<p>demo</p>
<p><a class="link"   href="https://wwaz.lanzoum.com/ifl3W1c089fg" >原PDF下载 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>大物拾遗录</tag>
      </tags>
  </entry>
  <entry>
    <title>Jlink-RTT扫频</title>
    <url>/2025/02/07/Jlink-RTT%E6%89%AB%E9%A2%91/</url>
    <content><![CDATA[<blockquote>
<p>可提供操作系统级别的采样速度，远远大于jscope和vofa正常的串口通信，用于参数辨识+控制设计</p>
</blockquote>
<h1 id="1-啁啾信号"><a href="#1-啁啾信号" class="headerlink" title="1.啁啾信号"></a>1.啁啾信号</h1><p>定义：频率随着时间增加或减小的信号。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070923561.png"
                      alt="image-20250207092323502"
                ></p>
<p>使用C实现：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> chirp = <span class="number">0</span>;<span class="comment">//啁啾信号</span></span><br><span class="line"><span class="type">float</span> chirp_zero_phase= <span class="number">0</span>;<span class="comment">//初始相位</span></span><br><span class="line"><span class="type">float</span> chirp_f0 = <span class="number">0</span>;<span class="comment">//初始频率</span></span><br><span class="line"><span class="type">float</span> chirp_k = <span class="number">0.0025</span>;<span class="comment">//频率变化率</span></span><br><span class="line"><span class="type">float</span> <span class="type">chirp_t</span> = <span class="number">0</span>;</span><br><span class="line"><span class="type">float</span> chirp_f = <span class="number">0</span>;<span class="comment">//信号频率</span></span><br><span class="line"><span class="type">float</span> Chrip_Amplitude = <span class="number">6000</span>;<span class="comment">//信号幅值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Make_Chirp</span><span class="params">(<span class="type">int</span> t)</span></span><br><span class="line">&#123;</span><br><span class="line"> chirp_f = chirp_f0 + chirp_k * t;</span><br><span class="line">  chirp = Chrip_Amplitude*sinf(chirp_zero_phase + <span class="number">2</span> * PI*</span><br><span class="line">(chirp_f0+chirp_k*<span class="number">0.5f</span>*t)* t/<span class="number">1000</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用1ms定时器中断运行产生啁啾信号函数，运行120s，产生0-300Hz的幅值为6000的啁啾信号，图像如图所示。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070924372.png"
                      alt="image-20250207092448336"
                ></p>
<blockquote>
<p>香农采样定理：要想根据采样准确的再现信号，信号中必须不含有高于1&#x2F;2采样速率的频率成分。</p>
</blockquote>
<h1 id="2-Jlink-RTT"><a href="#2-Jlink-RTT" class="headerlink" title="2.Jlink RTT"></a>2.Jlink RTT</h1><p>系统运行频率为1kHz，频率最大值可以根据香农采样定理初步确定为500Hz以下，然后可以根据系统具 体情况确定扫频最大频率。</p>
<blockquote>
<p>Jlink RTT耗费系统资源少，不影响系统的实时性。RTT的性能明显高于其他将数据输出到主机的模式。平均一行文本可以在1微秒或更短的时间内输出。基本上相当于做一个memcopy()的时间。RTT速度由调用发送函数的速度决定，速度可以达到很高。局限在于无法通过曲线直观观察数据，无法用于在线调试。但用来做参数辨识及更细的分析很合适</p>
</blockquote>
<h2 id="2-1-移植RTT"><a href="#2-1-移植RTT" class="headerlink" title="2.1 移植RTT"></a>2.1 移植RTT</h2><p>RTT源码包在JLINK驱动的目录中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070926799.png"
                      alt="image-20250207092648751"
                ></p>
<p>将RTT文件夹复制到工程文件夹中，并在工程中新建RTT分组，将RTT文件中两个.c文件添加进来，并在魔术棒中添加RTT的头文件路径。之后可以正常使用Jlink RTT</p>
<h2 id="2-2-使用RTT"><a href="#2-2-使用RTT" class="headerlink" title="2.2 使用RTT"></a>2.2 使用RTT</h2><p>常用函数 SEGGER_RTT_SetTerminal(unsigned char TerminalId) 该函数传入参数为终端ID，在Jlink RTT Viewer中可以打开不同终端窗口查看数据，同时在初始窗口中会 显示所有终端数据。 SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, …) 该函数用于打印数据，常用参数格式为</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">%[flags][Fieldwidth][.Precision]ConversionSpecifier</span><br><span class="line">    Supported flags:</span><br><span class="line">          -: 字段宽度内左对齐</span><br><span class="line">          +: 为有符号参数打印符号</span><br><span class="line">          <span class="number">0</span>: 用<span class="number">0</span>代替空格. 使用“-”或精度时忽略</span><br><span class="line">    Supported conversion specifiers:</span><br><span class="line">          c: 将参数打印为一个字符</span><br><span class="line">          d: 将参数打印为有符号整数</span><br><span class="line">          u: 将参数打印为无符号整数</span><br><span class="line">          x: 将参数打印为十六进制整数</span><br><span class="line">          s: 打印参数指向的字符串</span><br><span class="line">          p: 将参数打印为 <span class="number">8</span> 位十六进制整数.(参数应该是一个指向 <span class="type">void</span> 的指针)</span><br></pre></td></tr></table></figure></div>

<p>打印整型（u8 u16 u32 s8 s16 s32）时使用“d” 打印字符串时使用“s” 打印浮点数时，使用out_float函数将float型转换为字符串后打印。或通过在SEGGER_RTT_vprintf中添 加下列代码实现：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SEGGER_RTT_PRINT_FLOAT_ENABLE</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">float</span> fv;</span><br><span class="line">            fv = (<span class="type">float</span>)va_arg(*pParamList, <span class="type">double</span>);    <span class="comment">//取出输入的浮点数值</span></span><br><span class="line">            v = (<span class="type">int</span>)fv;                                <span class="comment">//取整数部分</span></span><br><span class="line">            _PrintInt(&amp;BufferDesc, v, <span class="number">10u</span>, NumDigits, FieldWidth, FormatFlags); </span><br><span class="line"><span class="comment">//显示整数，支持负数</span></span><br><span class="line">            _StoreChar(&amp;BufferDesc, <span class="string">&#x27;.&#x27;</span>);                                       </span><br><span class="line"> <span class="comment">//显示小数点</span></span><br><span class="line">            v = <span class="built_in">abs</span>((<span class="type">int</span>)(fv * <span class="number">100</span>));               </span><br><span class="line">            v = v % <span class="number">100</span>;</span><br><span class="line">            _PrintInt(&amp;BufferDesc, v, <span class="number">10u</span>, <span class="number">2</span>, FieldWidth, FormatFlags);         </span><br><span class="line"> <span class="comment">//显示小数点后两位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//para:</span></span><br><span class="line"><span class="comment">//value:the floating number </span></span><br><span class="line"><span class="comment">//decimal_digit: Fractional part length</span></span><br><span class="line"><span class="comment">//output_length: length of output data</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *<span class="title function_">out_float</span><span class="params">(<span class="type">double</span> value, <span class="type">unsigned</span> <span class="type">char</span> decimal_digit, <span class="type">unsigned</span> </span></span><br><span class="line"><span class="params"><span class="type">char</span> *output_length)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">char</span> _output[<span class="number">20</span>];</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> integer;<span class="comment">//整数部分</span></span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> decimal;<span class="comment">//小数部分</span></span><br><span class="line"> <span class="type">unsigned</span> <span class="type">char</span> _output_length = <span class="number">0</span>;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">char</span> _length_buff = <span class="number">0</span>;</span><br><span class="line"> <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> *return_pointer;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">char</span> signal_flag;</span><br><span class="line"> <span class="keyword">if</span> (value &lt; <span class="number">0</span>)</span><br><span class="line">  signal_flag = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">  signal_flag = <span class="number">0</span>;</span><br><span class="line"> value = <span class="built_in">fabs</span>(value);</span><br><span class="line"> integer = (<span class="type">unsigned</span> <span class="type">long</span>)value;</span><br><span class="line"> decimal = (<span class="type">unsigned</span> <span class="type">long</span>)((value - integer) * <span class="built_in">pow</span>(<span class="number">10.0</span>, decimal_digit));</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> integer_buff = integer;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> decimal_buff = decimal;</span><br><span class="line"> <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span> (integer / <span class="number">10</span> != <span class="number">0</span>)</span><br><span class="line">  _length_buff++;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> _length_buff++;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> integer = integer / <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; _length_buff; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span> (i == _length_buff - <span class="number">1</span>)</span><br><span class="line">  _output[_output_length] = integer_buff % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//_output[_output_length] = integer_buff / 10 % 10 + 0x30;</span></span><br><span class="line">  _output[_output_length] = integer_buff / (<span class="type">unsigned</span> <span class="type">long</span>)<span class="built_in">pow</span>(<span class="number">10.0</span>, </span><br><span class="line">_length_buff - i - <span class="number">1</span>) % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line"> integer_buff = integer_buff % (<span class="type">unsigned</span> <span class="type">long</span>)<span class="built_in">pow</span>(<span class="number">10.0</span>, _length_buff </span><br><span class="line">- i - <span class="number">1</span>);</span><br><span class="line"> <span class="comment">//integer_buff = integer_buff % 10;</span></span><br><span class="line"> &#125;</span><br><span class="line"> _output_length++;</span><br><span class="line"> &#125;</span><br><span class="line"> _output[_output_length] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"> _output_length++;</span><br><span class="line"> _length_buff = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">if</span> (decimal / <span class="number">10</span> != <span class="number">0</span>)</span><br><span class="line">  _length_buff++;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> _length_buff++;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> decimal = decimal / <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; _length_buff; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span> (i == _length_buff - <span class="number">1</span>)</span><br><span class="line">  _output[_output_length] = decimal_buff % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  _output[_output_length] = decimal_buff / (<span class="type">unsigned</span> <span class="type">long</span>)<span class="built_in">pow</span>(<span class="number">10.0</span>, </span><br><span class="line">_length_buff-i<span class="number">-1</span>) % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line"> decimal_buff = decimal_buff % (<span class="type">unsigned</span> <span class="type">long</span>)<span class="built_in">pow</span>(<span class="number">10.0</span>, _length_buff </span><br><span class="line">- i - <span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> _output_length++;</span><br><span class="line"> &#125;</span><br><span class="line"> _output[_output_length] = <span class="number">0x00</span>;</span><br><span class="line"> _output_length++;</span><br><span class="line"> return_pointer = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">realloc</span>(return_pointer,_output_length);</span><br><span class="line">*output_length = _output_length - <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span> (return_pointer == <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span> (signal_flag == <span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> return_pointer[<span class="number">0</span>] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"> <span class="built_in">memcpy</span>(return_pointer+<span class="number">1</span>, _output, _output_length);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">memcpy</span>(return_pointer, _output, _output_length);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> return_pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3.使用示例"></a>3.使用示例</h1><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SEGGERRTTTask</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> timestamp = TIM5-&gt;CNT;</span><br><span class="line"> <span class="keyword">if</span>(RTT_Send_flag)</span><br><span class="line"> &#123;</span><br><span class="line">		SEGGER_RTT_SetTerminal(<span class="number">0</span>);<span class="comment">//设置终端ID</span></span><br><span class="line">	  SEGGER_RTT_printf(<span class="number">0</span>,<span class="string">&quot;Des = %s \n&quot;</span>, out_float(g_stGM_YawSpeedPID.fpDes,<span class="number">4</span>,&amp;length));<span class="comment">//r</span></span><br><span class="line">		SEGGER_RTT_printf(<span class="number">0</span>,<span class="string">&quot;U = %s \n&quot;</span>, out_float(g_stGM_YawSpeedPID.fpU,<span class="number">4</span>,&amp;length));<span class="comment">//pidu</span></span><br><span class="line"></span><br><span class="line">		SEGGER_RTT_SetTerminal(<span class="number">1</span>);</span><br><span class="line">		SEGGER_RTT_printf(<span class="number">0</span>,<span class="string">&quot;FB = %s \n&quot;</span>, out_float(g_stGM_YawSpeedPID.fpFB,<span class="number">4</span>,&amp;length));<span class="comment">//y_flt</span></span><br><span class="line">     SEGGER_RTT_printf(<span class="number">0</span>,<span class="string">&quot;YY = %s \n&quot;</span>, out_float(g_stGM_YawSpeedPID.fpFB,<span class="number">4</span>,&amp;length));<span class="comment">//y_raw</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>一般使用JLinkRTTViewer观看数据</p>
<blockquote>
<p>过低版本的jlink可能不自带RTT Viewer的安装包，如果在jlink的安装文件夹里面找不到RTTViewer的话升个版本就行</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070928278.png"
                      alt="image-20250207092827230"
                ></p>
<p>将Specify Target Device选为对应的型号 Target Interface &amp; Speed选为对应的接口。</p>
<p>关于最后的RTT Control Block的Address，可以通过工程编译生成的.map文件（双击HITCRT_ENGINEER_2024即可打开）查看</p>
<p>[]: <a class="link"   href="https://blog.csdn.net/qq_38295600/article/details/129331670" >https://blog.csdn.net/qq_38295600/article/details/129331670 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>	“查看MAP”</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070929305.png"
                      alt="image-20250207092940265"
                ></p>
<p>在文件中查询_SEGGER_RTT得到类似下面的代码</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">_SEGGER_RTT  <span class="number">0x20002f50</span>  Data  <span class="number">168</span>  segger_rtt.o(.bss)</span><br></pre></td></tr></table></figure></div>

<p>其中0x20002f50即为the address of the RTT Control block。</p>
<p>连接后就可以观看JLink RTT发送的数据。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070930254.png"
                      alt="image-20250207093006207"
                ></p>
<p>使用JLinkRTTViewer导出数据时，可以点击工具栏中Logging-&gt;Start Terminals Logging，之后Terminals中的数据就会被存储在.log文件中，之后再次点击Logging-&gt;Stop Terminals Logging终止数据记录。</p>
<p>如果数据更新不正常可以修改浮点数精度</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42466  0.0  0.0  0.0  0.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42468  0.0  0.0  0.0  0.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42470  0.0  0.0  0.0  0.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42472  0.0  0.0  0.0  0.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42474  0.0  0.0  0.0  0.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42476  0.5  11.600  299.899  5803.935</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42478  0.29  34.793  299.700  5800.202</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42480  0.98  81.148  299.500  5784.846</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42482  0.284  173.781  299.299  5746.227</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42484  0.747  358.877  299.100  5661.67</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42486  1.859  728.712  298.899  5482.806</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42488  4.452  1467.655  298.700  5118.334</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42492  10.384  2946.81  298.300  4387.412</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42496  53.297  11787.771  297.900  -68.46</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42500  118.456  23579.550  297.500  -6031.500</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42504  567.645  94098.648  297.100  -41811.968</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42508  1230.136  188146.62  296.500  -185136.546</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42514  5672.13  751090.0  295.900  -758900.125</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42520  25687.847  2998271.750  295.300  -3055603.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42528  241244.750  23896540.0  294.300  -24520456.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42536  1061137.875  190583856.0  293.500  -98301464.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42546  9632197.0  1519956224.0  292.300  -1574043008.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42558  178292192.0  3540067328.0  291.100  -4037248000.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42570  1572560768.0  4164190208.0  289.899  -321142784.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42582  2459584512.0  3717332992.0  288.700  -2777284608.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42594  3926392832.0  3791650816.0  287.500  -4118806528.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42606  1244397568.0  369098752.0  286.299  -1610612736.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42618  3019898880.0  2684354560.0  285.100  -0.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42628  2415919104.0  2147483648.0  284.100  -0.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42638  3489660928.0  0.0  283.299  -0.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42644  3221225472.0  0.0  282.699  -0.0</span> </span><br></pre></td></tr></table></figure></div>

]]></content>
  </entry>
  <entry>
    <title>MIT计算机教育缺失一课之shell使用</title>
    <url>/2025/02/07/MIT%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E8%82%B2%E7%BC%BA%E5%A4%B1%E4%B8%80%E8%AF%BE%E4%B9%8Bshell%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="课程链接"><a href="#课程链接" class="headerlink" title="课程链接"></a>课程链接</h3><p><a class="link"   href="https://space.bilibili.com/518734451/favlist?fid=2359650951&ftype=create" >刘黑黑a的个人空间-刘黑黑a个人主页-哔哩哔哩视频 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1vt4y1R71v/?spm_id_from=333.337.search-card.all.click&vd_source=83f58304f59c0181e00c002b63d6d5f9" >MIT 计算机教育中缺失的一课 (中英双字幕)、时间顶级名校最详细计算机知识讲解…_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://missing-semester-cn.github.io/" >计算机教育中缺失的一课 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="shell、工具、脚本"><a href="#shell、工具、脚本" class="headerlink" title="shell、工具、脚本"></a>shell、工具、脚本</h2><p>Bash 中的字符串通过 <code>&#39;</code> 和 <code>&quot;</code> 分隔符来定义，但是它们的含义并不相同。以 <code>&#39;</code> 定义的字符串为原义字符串，其中的变量不会被转义，而 <code>&quot;</code> 定义的字符串会将变量值进行替换。</p>
<p>eg:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">foo = bar #打印barecho &#x27;$foo&#x27;</span><br><span class="line">echo &quot;$foo&quot;   # 打印 $foo</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="shell的通配（globbing）"><a href="#shell的通配（globbing）" class="headerlink" title="shell的通配（globbing）"></a>shell的通配（globbing）</h2><ol>
<li><p>通配符</p>
<p>可以使用？或者*来匹配字符</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">例如，对于文件 foo, foo1, foo2, foo10 和 bar, <span class="built_in">rm</span> foo? 这条命令会删除 foo1 和 foo2 ，而 <span class="built_in">rm</span> foo* 则会删除除了 bar 之外的所有文件。</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>花括号</p>
<p>当你有一系列的指令，其中包含一段公共子串时，可以用花括号来自动展开这些命令。这在批量移动或转换文件时非常方便。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">convert image.&#123;png,jpg&#125;</span><br><span class="line"><span class="comment"># 会展开为</span></span><br><span class="line">convert image.png image.jpg</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> /path/to/project/&#123;foo,bar,baz&#125;.sh /newpath</span><br><span class="line"><span class="comment"># 会展开为</span></span><br><span class="line"><span class="built_in">cp</span> /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以结合通配使用</span></span><br><span class="line"><span class="built_in">mv</span> *&#123;.py,.sh&#125; folder</span><br><span class="line"><span class="comment"># 会移动所有 *.py 和 *.sh 文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> foo bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面命令会创建 foo/a, foo/b, ... foo/h, bar/a, bar/b, ... bar/h 这些文件</span></span><br><span class="line"><span class="built_in">touch</span> &#123;foo,bar&#125;/&#123;a..h&#125;</span><br><span class="line"><span class="built_in">touch</span> foo/x bar/y</span><br><span class="line"><span class="comment"># 比较文件夹 foo 和 bar 中包含文件的不同</span></span><br><span class="line">diff &lt;(<span class="built_in">ls</span> foo) &lt;(<span class="built_in">ls</span> bar)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># &lt; x</span></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"><span class="comment"># &gt; y</span></span><br></pre></td></tr></table></figure></div>



<blockquote>
<p>shellcheck工具可以帮助查找sh&#x2F;bash脚本中的错误</p>
</blockquote>
</li>
<li><p>shell的解释行（shebang）</p>
<p><a class="link"   href="https://blog.csdn.net/weixin_43999327/article/details/104553431" >Linux - 认识shell的解释行（Shebang）-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>为脚本指定运行环境，无需在调用时由用户指定解释器，从而对用户和其它程序隐藏其实现细节</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/local/bin/python</span></span><br><span class="line"><span class="comment"># 第一行就是把该脚本的运行环境指定到python上去</span></span><br><span class="line">import sys</span><br><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> reversed(sys.argv[1:]):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 如下列出了一些典型的shebang解释器指令：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/sh—使用sh，即Bourne shell或其它兼容shell执行脚本</span></span><br><span class="line"><span class="comment">#!/bin/csh—使用csh，即C shell执行</span></span><br><span class="line"><span class="comment">#!/usr/bin/perl -w—使用带警告的Perl执行</span></span><br><span class="line"><span class="comment">#!/usr/bin/python -O—使用具有代码优化的Python执行</span></span><br><span class="line"><span class="comment">#!/usr/bin/php—使用PHP的命令行解释器执行</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>tldr网站与GUI工具</p>
<p>too long ,don’t read!</p>
<blockquote>
<p>man命令的简易替代版本（man命令显示的过于长和多了）</p>
</blockquote>
<p><a class="link"   href="https://tldr.inbrowser.app/" >tldr InBrowser.App <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install tldr <span class="comment">#直接sudo apt安装就可以用的</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>hello_world_in_ROS2</title>
    <url>/2024/09/07/ROS2/</url>
    <content><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ol>
<li><p>创建工作空间</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p helloworld/src <span class="comment">#创建目录</span></span><br><span class="line"><span class="built_in">cd</span> helloworld</span><br><span class="line">colcon build --package-select filename</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建功能包</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> src</span><br><span class="line">ros2 pkg create pkg01_helloworld_cpp（功能包名）...</span><br><span class="line">--build-type ament_cmake... <span class="comment">#创建类型，如果是python就是ament_python</span></span><br><span class="line">--dependencies rclcpp...   <span class="comment">#(添加依赖)</span></span><br><span class="line">--node-name helloworld （可执行文件名）</span><br><span class="line"></span><br><span class="line">ros2 pkg create pkg01_helloworld_cpp--build-type ament_cmake --dependencies rclcpp --node-name helloworld</span><br></pre></td></tr></table></figure></div>

<p>node名最好与工作空间名一致</p>
</li>
<li><p>写源文件</p>
</li>
<li><p>配置文件后编译</p>
<p>pakage.xml  主要看  <depend>rclcpp</depend></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070941146.png"
                      alt="image-20250207094112087"
                ></p>
<p>编译就还是回到主工作空间里面：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">colcon build</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行代码</p>
</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>创建工作空间</span></figcaption><table><tr><td class="code"><pre><span class="line">source install/setup.bash</span><br><span class="line">ros2 run pkg_01_helloworld_cpp(功能包名) helloworld(可执行文件名)</span><br></pre></td></tr></table></figure></div>

<h2 id="2-ROS2中的初始化和资源释放"><a href="#2-ROS2中的初始化和资源释放" class="headerlink" title="2. ROS2中的初始化和资源释放"></a>2. ROS2中的初始化和资源释放</h2><p>在 C++ 中，需要进行初始化和资源释放的过程主要有以下几个原因：</p>
<h3 id="1-资源管理"><a href="#1-资源管理" class="headerlink" title="1. 资源管理"></a>1. 资源管理</h3><p>C++ 是一种手动管理资源的编程语言，这意味着程序员需要显式地分配和释放内存和其他资源。初始化和资源释放是确保资源正确管理的重要步骤，防止内存泄漏和资源枯竭。</p>
<ul>
<li><strong>初始化</strong>：在程序开始时初始化资源，如内存、文件句柄、网络连接等。</li>
<li><strong>资源释放</strong>：在程序结束或不再需要资源时释放这些资源，确保系统资源可以被其他程序使用。</li>
</ul>
<h3 id="2-防止资源泄漏"><a href="#2-防止资源泄漏" class="headerlink" title="2. 防止资源泄漏"></a>2. 防止资源泄漏</h3><p>资源泄漏是指程序运行过程中分配的资源没有正确释放，导致资源无法被重新利用，最终可能耗尽系统资源。通过适当地初始化和释放资源，可以有效防止资源泄漏。</p>
<h3 id="3-确保程序稳定和高效运行"><a href="#3-确保程序稳定和高效运行" class="headerlink" title="3. 确保程序稳定和高效运行"></a>3. 确保程序稳定和高效运行</h3><p>正确的资源管理可以确保程序稳定和高效地运行，减少崩溃和性能下降的风险。例如，在 ROS 2 中，初始化和关闭过程确保了节点之间的通信正常进行和正确终止。</p>
<h3 id="4-ROS-2-特定原因"><a href="#4-ROS-2-特定原因" class="headerlink" title="4. ROS 2 特定原因"></a>4. ROS 2 特定原因</h3><p>在 ROS 2 中，初始化和资源释放尤其重要，因为它涉及到多个节点之间的通信和协调。具体原因包括：</p>
<ul>
<li><strong>初始化</strong>：<code>rclcpp::init(argc, argv);</code> 初始化 ROS 2 客户端库，确保所有相关组件正确设置，以便节点可以正常工作。这包括设置上下文、解析参数等。</li>
<li><strong>资源释放</strong>：<code>rclcpp::shutdown();</code> 关闭 ROS 2 客户端库，确保所有资源正确释放，所有节点之间的通信正常终止。这对于避免资源泄漏和确保程序正确退出至关重要。</li>
</ul>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>以下是 ROS 2 节点示例代码的详细解释：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">cpp复制代码</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rclcpp/rclcpp.hpp&quot;</span>int main(int argc, char **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 初始化 ROS 2 客户端</span></span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建节点指针</span></span><br><span class="line">    <span class="keyword">auto</span> node = std::<span class="built_in">make_shared</span>&lt;rclcpp::Node&gt;(<span class="string">&quot;helloworld_node_cpp&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出日志</span></span><br><span class="line">    <span class="built_in">RCLCPP_INFO</span>(node-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ol>
<li>**<code>rclcpp::init(argc, argv);</code>**：初始化 ROS 2 客户端库，设置上下文环境，解析命令行参数，确保节点可以正常运行。</li>
<li>**<code>auto node = std::make_shared&lt;rclcpp::Node&gt;(&quot;helloworld_node_cpp&quot;);</code>**：创建一个 ROS 2 节点，节点名称为 <code>helloworld_node_cpp</code>。</li>
<li>**<code>RCLCPP_INFO(node-&gt;get_logger(), &quot;Hello, world!&quot;);</code>**：使用日志记录器输出一条信息。</li>
<li>**<code>rclcpp::shutdown();</code>**：关闭 ROS 2 客户端库，释放所有资源，确保程序正常终止。</li>
</ol>
<p>通过这些步骤，可以确保 ROS 2 节点在初始化后正常工作，并在结束时正确释放资源。</p>
]]></content>
  </entry>
</search>
