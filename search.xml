<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>demo</title>
    <url>/2023/09/02/demo/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. <span id="more"></span></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>开关电路及其仿真</title>
    <url>/2023/09/02/%E5%BC%80%E5%85%B3%E7%94%B5%E8%B7%AF%E5%8F%8A%E5%85%B6%E4%BB%BF%E7%9C%9F/</url>
    <content><![CDATA[<ol>
<li><p>开关电路的介绍</p>
<p>可以在很高的效率下完成电压的升降 常用的有BUCK BOOST电路</p>
<p>开关电路一般来说只适用于高频电路</p>
</li>
<li><p>BUCK电路</p>
</li>
</ol>
<p>通过开关MOSEFT管的占空比来调节整个PWM波的占空比，再加上电感电容的高通滤波器，就可以输出稳定的降压</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261132218.png"
                      alt="image-20230801160945792"
                ></p>
<ol start="3">
<li><p>BOOST简化电路</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261132382.png"
                      alt="image-20230801161121460"
                ></p>
</li>
</ol>
<p>[1]: <a class="link"   href="https://blog.csdn.net/lg2lh/article/details/24369903" >https://blog.csdn.net/lg2lh/article/details/24369903 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>	“”关于伏秒平衡””</p>
<p><a class="link"   href="https://blog.csdn.net/weixin_43381663/article/details/129694870" >【电源】DC-DC电路中的伏秒平衡原理 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>利用好第一阶段给电感储能，再在第二阶段使得电感和电源同时给输出端提供电压，使得输出电压要更大。而在第一阶段中，输出电压就由电容来维持</p>
<ol start="4">
<li><p>BUCK-BOOST电路</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261133846.png"
                      alt="image-20230801162509696"
                ></p>
</li>
</ol>
<p>可以方便地调节了</p>
<p>若一直关闭Q8打开Q7，则成为BUCK电路</p>
<p>若一直关闭Q5打开Q6，则称为BOOST电路</p>
<blockquote>
<p>桥臂在电源端就是BUCK,在输出端就是BOOST</p>
</blockquote>
]]></content>
      <tags>
        <tag>电子技术</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言的多文件编程</title>
    <url>/2023/09/02/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<ol>
<li><p>多文件编程原理</p>
<p> C++在编译多文件程序时，首先将每一个文件单独编译，然后通过链接将各个文件组合成一个可执行程序</p>
<p> 可以将函数的声明放到头文件中去，而在主文件中引用头文件就相当于将头文件中内容拷贝到主文件中再进行编译</p>
<p> <a class="link"   href="https://blog.csdn.net/chen_z_p/article/details/105352547" >我终于把C++多文件编程理解透彻了-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>关于头文件</p>
<p> 后缀为 .h 的文件，<mark>记得将其放置在条件编译预处理语句中 </mark>，防止因为依赖关系被多次包含</p>
</li>
</ol>
<p>​		函数声明：显然应该放在头文件中，前面很清楚。<br>​		类定义、结构定义：用函数定义的逻辑想，似乎不能放在头文件中。但它<mark>应该放在头文件</mark>。第一，每个cpp文件应该有一个定义，	在编译的时候编译器才知道怎么为对象分配空间。其次，类型定义不会在内存上分配空间。  </p>
<p>​		模板函数：编译器必须在编译的时候根据函数模板实例化对应的函数，所以应该放在头文件。   </p>
<p>​		内联函数：编译期间被插到调用位置，所以也要放在头文件。</p>
<p>​		<mark>函数定义：不要！</mark>C++规定一个程序同签名的函数只能有一个定义。如果你把函数定义放在头文件，并且同一个程序的多个cpp	文件包含了该头文件，这样，在链接的时候会发现多个定义版本，链接报错。</p>
<p>​		<mark>变量定义：不要！</mark>与上面类似，被多个文件包含的时候会出现多次定义同一个变量，链接错误。但是，static变量和extern变量 	可以，以及宏定义的常量，因为这些在多个文件出现并不会出错。</p>
<ol start="3">
<li><p>使用命令行运行多文件项目</p>
 <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">g++ main.cpp fun.cpp -o out   #列举所有要编译的文件</span><br></pre></td></tr></table></figure></div>

</li>
<li><p>使用  vscode 编译多文件项目</p>
<p> 在安装好一众插件的 vscode 环境中，在主文件开头使用 #include “” 的方式来引入头文件和预编译文件</p>
 <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*实例项目*/</span></span><br><span class="line"><span class="comment">// main.c   主文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;print.h&quot;</span>      <span class="comment">//这个里面放所有的函数声明和库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;print.c&quot;</span>      <span class="comment">//这里面放所有的函数定义</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Print(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fuction.c  用来放所有函数的定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;function.h&quot;</span>		<span class="comment">//记得要引入头文件</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//function.h	这个头文件用来声明函数，应用包</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>          </span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HEAD_H					<span class="comment">//条件编译预处理语句</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEAD_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p> 最后直接在主文件中运行就可以了</p>
</li>
<li><p>使用 cmake 编译多文件项目</p>
</li>
<li><p>多文件编程中 extern 的使用</p>
</li>
</ol>
<p>extern表示改变量是定义在其他文件中的，在多文件情况下最标准的方式是：</p>
<p>在 .c文件中声明变量， 在其对应的 .h 文件中使用extern声明变量，这样其他地方要用这个变量时只需要 include 一下这个 .h文件即可</p>
<blockquote>
<p>注意！在.c中声明变量是可以顺便初始化值，但extern的时候就不要这么干了不然会显示重复定义！</p>
</blockquote>
]]></content>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora 笔记</title>
    <url>/2023/09/02/Typora%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h4><p>按下ctrl+1~可以输入六级大小的标题</p>
<h4 id="2-分隔符"><a href="#2-分隔符" class="headerlink" title="2. 分隔符"></a>2. 分隔符</h4><p>按下 *** +++ — 都可以创造一个分隔符</p>
<hr>
<p>+++</p>
<hr>
<h4 id="3-下划线"><a href="#3-下划线" class="headerlink" title="3. 下划线"></a>3. 下划线</h4><p><u>按下 ctrl + u</u></p>
<h4 id="4-删除线"><a href="#4-删除线" class="headerlink" title="4. 删除线"></a>4. 删除线</h4><p>文字前后都加上 ~~   <del>就像这样</del></p>
<h4 id="5-斜体"><a href="#5-斜体" class="headerlink" title="5. 斜体"></a>5. 斜体</h4><p>文字前后都加上 一个 *	<em>就像这样</em></p>
<p>快捷键是 ctrl + i</p>
<h4 id="6-加粗"><a href="#6-加粗" class="headerlink" title="6. 加粗"></a>6. 加粗</h4><p>文字前后都加上两个 *  	<strong>就像这样</strong></p>
<p>或者直接 ctrl+ 文字	就像这样</p>
<h4 id="7-高亮"><a href="#7-高亮" class="headerlink" title="7. 高亮"></a>7. 高亮</h4><p>文字前后都加上&#x3D;&#x3D; 			&#x3D;&#x3D;就像这样&#x3D;&#x3D;</p>
<h4 id="8-下标"><a href="#8-下标" class="headerlink" title="8. 下标"></a>8. 下标</h4><p>就像这样 	H<del>2</del>O  在 H 和O之间加上~</p>
<h4 id="9-上标"><a href="#9-上标" class="headerlink" title="9. 上标"></a>9. 上标</h4><p>就像这样 		i^2^	在 i  和 2 后面都加上~</p>
<h4 id="10-引用"><a href="#10-引用" class="headerlink" title="10. 引用"></a>10. 引用</h4><p>就用一个大于号</p>
<blockquote>
<p>就像这样  </p>
</blockquote>
<h4 id="11-特殊语法块（代码块）"><a href="#11-特殊语法块（代码块）" class="headerlink" title="11. 特殊语法块（代码块）"></a>11. 特殊语法块（代码块）</h4><p>用三个 &#96;&#96;&#96; 再加上代码种类</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="12-链接"><a href="#12-链接" class="headerlink" title="12. 链接"></a>12. 链接</h4><p>​	1. 外部链接</p>
<p>​				[ ] 里面加上链接显示的名称，后面的 ( ) 里面加上链接本体	<a href="%5B(8%E6%9D%A1%E6%B6%88%E6%81%AF">本笔记原来源</a> Typora一站式使用教程，成为Markdown大佬，看这一篇就够了_typora用来干什么_飞Link的博客-CSDN博客](<a class="link"   href="https://blog.csdn.net/feizuiku0116/article/details/119898062" >https://blog.csdn.net/feizuiku0116/article/details/119898062 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>))</p>
<ol start="2">
<li><p>内部链接跳转</p>
<p>​		[ ] 里面加上链接显示的名称，后面的 ( ) 里面加上链接本体, 比如标题##啥啥 [12节链接](# 12.链接)</p>
</li>
</ol>
<h4 id="13-图片"><a href="#13-图片" class="headerlink" title="13. 图片"></a>13. 图片</h4><p>[ ] 里面加上链接显示的名称，后面的 ( ) 里面加上图片链接或者本地存储路径</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261131214.png"
                      alt="2023-07-21_085124-16899007513061"
                ></p>
<h4 id="14-typora-的-css-美化"><a href="#14-typora-的-css-美化" class="headerlink" title="14. typora 的 css 美化"></a>14. typora 的 css 美化</h4><p>在typora的文件-&gt;偏好设置-&gt;外观-&gt;主题中可以选择心仪的主题，而主题可以在 Typora皮肤官网下载（记得使用魔法）。</p>
<p>而皮肤的安装可以在主题选项中打开主题文件夹，把主题的css 文件直接 copy过去即可~</p>
<p>关于 css 的自己美化和设置，有待学习，但似乎已经存在的主题已经足够好看</p>
]]></content>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>CAN通讯</title>
    <url>/2023/09/11/CAN%E9%80%9A%E8%AE%AF/</url>
    <content><![CDATA[<ol>
<li><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2></li>
</ol>
<p>通信分类 1. 串行 USART IIC SPI USB CAN 2. 并行 6800 8080 通信方式</p>
<p>差分信号 隐形电平对应逻辑 1，两线压差为0，显性电平对应逻辑0，两线压差为2.5V   可以使外界干扰减到很小</p>
<p>终端电阻：120欧 用于减少回波反射</p>
<p>关于CAN的帧</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/note_pic/image-20230821200627057.png"
                      alt="image-20230821200627057"
                ></p>
<p>后三种帧是由硬件来完成的，重点关注前两者</p>
<p>&#x3D;&#x3D;数据帧&#x3D;&#x3D;：《CAN入门书》  P24 </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/note_pic/image-20230821201332350.png"
                      alt="image-20230821201332350"
                ></p>
<p>RTR段：判断是否是远程帧</p>
<p>IDE：标识符选择位</p>
<p>SRR：代替远程请求位</p>
<p>DLC：给定数据长度</p>
<p>CRC：校验段</p>
<p>&#x3D;&#x3D;优先级的决定&#x3D;&#x3D;   《CAN入门书》 P33</p>
<p>当总线空闲时最先发的获得发送权</p>
<p>当多个单元同时开始发送时，从仲裁位的第一位开始仲裁，连续输出显性电平最多的单元可继续发送</p>
<blockquote>
<p>所以 ID 最小（也就是0最多）的优先级最高</p>
</blockquote>
<ol start="2">
<li><h2 id="STM32中的CAN"><a href="#STM32中的CAN" class="headerlink" title="STM32中的CAN"></a>STM32中的CAN</h2></li>
</ol>
<p>如下图可见，CAN2不能控制筛选器，如果有CAN2的话，在使用CAN2之前一定要先使能 CAN1的时钟    <u>中文参考手册 P609</u></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/note_pic/image-20230821202142176-16944409121551.png"
                      alt="image-20230821202142176"
                ></p>
<blockquote>
<p>筛选器就是用来筛选有着固定ID的信息，减小总线负担</p>
</blockquote>
<p>CAN的配置</p>
<h3 id="位时序（控制波特率）"><a href="#位时序（控制波特率）" class="headerlink" title="位时序（控制波特率）"></a>位时序（控制波特率）</h3><ol>
<li><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4></li>
</ol>
<p><u>《CAN入门书》P40</u></p>
<p>一个位相当于是一帧数据，控制位时序相当于就是控制一帧数据的时间长度，再将这个时间长度取倒数就得到了波特率。</p>
<p>这些位都是由最小的时间单元组成，称为一个 time quantum，也就是 1tq</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/note_pic/image-20230825210937747-16955663895571.png"
                      alt="image-20230825210937747"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/note_pic/image-20230825210953730-16944409251272.png"
                      alt="image-20230825210953730"
                ></p>
<p>那么在实际程序中，就需要控制好这些位时序使得波特率正确</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">CAN_InitStructure.CAN_SJW=CAN_SJW_1tq;	<span class="comment">//重新同步跳跃宽度(Tsjw)为tsjw+1个时间单位 CAN_SJW_1tq~CAN_SJW_4tq</span></span><br><span class="line">CAN_InitStructure.CAN_BS1=CAN_BS1_9tq; <span class="comment">//Tbs1范围CAN_BS1_1tq ~CAN_BS1_16tq</span></span><br><span class="line">CAN_InitStructure.CAN_BS2=CAN_BS2_4tq;<span class="comment">//Tbs2范围CAN_BS2_1tq ~	CAN_BS2_8tq</span></span><br><span class="line">CAN_InitStructure.CAN_Prescaler = <span class="number">3</span>;  <span class="comment">//分频系数(Fdiv)为brp+1	</span></span><br></pre></td></tr></table></figure></div>

<p>因为该板子上的CAN是挂载在 APB1 时钟上，分频就是 42Mhz，再分完频就是 14Mhz，所以一个 tp 就是 $\frac{1}{14Mhz}$，而在上述代码中设置了总共 14 个 tp，所以一个位的时间长度是 $\frac{1}{1Mhz}$ ，所以波特率就是 1Mhz</p>
<ol start="2">
<li><h4 id="关于采样点："><a href="#关于采样点：" class="headerlink" title="关于采样点："></a>关于采样点：</h4></li>
</ol>
<p>见<u>STM32F4中文参考手册 P622</u></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/note_pic/image-20230825211732467-16944409301473.png"
                      alt="image-20230825211732467"
                ></p>
<p>由上图可以看到，SYNC_SEG 和 BS1 结束后为采样点，一般来说把采样点控制在 80% 左右比较合适</p>
<h3 id="滤波器"><a href="#滤波器" class="headerlink" title="滤波器"></a>滤波器</h3><p>筛选器有标识符模式和掩码模式</p>
<p>不管用不用滤波器都要配置好！</p>
<ol start="3">
<li><h2 id="用到的不错的视频和博客"><a href="#用到的不错的视频和博客" class="headerlink" title="用到的不错的视频和博客"></a>用到的不错的视频和博客</h2></li>
</ol>
<p><a class="link"   href="https://blog.csdn.net/XiaoXiaoPengBo/article/details/116206252?ops_request_misc=%7B%22request_id%22:%22163559744416780271593574%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163559744416780271593574&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116206252.pc_search_result_control_group&utm_term=can&spm=1018.2226.3001.4187" >秀！靠这篇我竟然2天理解了CAN协议！实战STM32F4 CAN！_can通信协议简单理解_Wireless_Link的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1Dq4y1J7WA/?from=search&seid=54886702141269529&spm_id_from=333.337.0.0" >CAN通信速成！从会到不会~_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_44793491/article/details/107298426" >CAN通信知识梳理及在Stm32上的应用（HAL库）_冬瓜~的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>嵌入式 STM32 CAN</tag>
      </tags>
  </entry>
  <entry>
    <title>光的衍射与干涉装置总结</title>
    <url>/2023/09/02/%E5%85%89%E7%9A%84%E8%A1%8D%E5%B0%84%E4%B8%8E%E5%B9%B2%E6%B6%89%E8%A3%85%E7%BD%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>z</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261109959.png"
                      alt="image-20231016230036374"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261109856.png"
                      alt="image-20231016230053777"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261117800.png"
                      alt="image-20231016230113246"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118971.png"
                      alt="image-20231016230131066"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118930.png"
                      alt="image-20231016230143484"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118958.png"
                      alt="image-20231016230156475"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118801.png"
                      alt="image-20231016230206976"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118392.png"
                      alt="image-20231016230226804"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118306.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261119776.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261119980.png"
                     
                ></p>
<p>demo</p>
<p><a class="link"   href="https://wwaz.lanzoum.com/ifl3W1c089fg" >原PDF下载 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>大物拾遗录</tag>
      </tags>
  </entry>
</search>
