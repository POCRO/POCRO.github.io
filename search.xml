<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CAN通信讲义</title>
    <url>/2023/09/11/CAN%E9%80%9A%E8%AE%AF/</url>
    <content><![CDATA[<h2 id="不错的参考博客"><a href="#不错的参考博客" class="headerlink" title="不错的参考博客"></a>不错的参考博客</h2><p><a class="link"   href="https://blog.csdn.net/XiaoXiaoPengBo/article/details/116206252?ops_request_misc=%7B%22request_id%22:%22163559744416780271593574%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163559744416780271593574&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116206252.pc_search_result_control_group&utm_term=can&spm=1018.2226.3001.4187" >秀！靠这篇我竟然2天理解了CAN协议！实战STM32F4 CAN！_can通信协议简单理解_Wireless_Link的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1Dq4y1J7WA/?from=search&seid=54886702141269529&spm_id_from=333.337.0.0" >CAN通信速成！从会到不会~_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_44793491/article/details/107298426" >CAN通信知识梳理及在Stm32上的应用（HAL库）_冬瓜~的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><h3 id="1-CAN通信物理层"><a href="#1-CAN通信物理层" class="headerlink" title="1.CAN通信物理层"></a>1.CAN通信物理层</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261142732.png"
                      alt="image-20250126114246686"
                ></p>
<p>具体实现</p>
<p>CAN控制器：STM32F407等MCU上自带的CAN控制器</p>
<p>CAN收发器：SN65HVD230芯片,CA-IS3052G隔离式 <a class="link"   href="https://item.szlcsc.com/548132.html" >CA-IS3052G <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261145381.png"
                      alt="image-20250126114534348"
                ></p>
<h3 id="2-CAN通信帧"><a href="#2-CAN通信帧" class="headerlink" title="2.CAN通信帧"></a>2.CAN通信帧</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261147606.png"
                      alt="image-20250126114754564"
                ></p>
<p>后三种帧是由硬件来完成的，重点关注前两者</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261148542.png"
                      alt="image-20250126114842507"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261148654.png"
                      alt="image-20250126114852613"
                ></p>
<p>ID段：数据的ID号，分为11位的标准格式ID和29位的扩展格式ID</p>
<p>DLC：给定数据长度</p>
<p>CRC：校验段</p>
<h3 id="3-CAN通信的重要基本特征"><a href="#3-CAN通信的重要基本特征" class="headerlink" title="3.CAN通信的重要基本特征"></a>3.CAN通信的重要基本特征</h3><ol>
<li><p>差分信号 </p>
<p>隐形电平对应逻辑 1，两线压差为0，显性电平对应逻辑0，两线压差为2.5V   可以使外界干扰减到很小（抑制共模干扰）</p>
<aside> 💡

<p>双绞线:减小电磁场相互作用</p>
<p>PCB Layout:确保信号传输不出现延时差异，防止出现信号失真或时序问题</p>
</aside>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261150235.png"
                      alt="image-20250126115013194"
                ></p>
</li>
<li><p>终端电阻</p>
<p>120欧 用于减少回波反射</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261153887.png"
                      alt="image-20250126115306798"
                ></p>
<p>多电机模式下设置好电机上的拨档使得终端电阻为120，主控端120欧电阻长期使用后可能掉落，所以最好电表测量实际终端电阻修改对应。</p>
</li>
<li><p>系统的柔软性</p>
<p>与总线相连的单元没有类似于“地址”的信息。因此在总线上增加单元时，连接在总线上的其它单元的软硬件及应用层都不需要改变。</p>
</li>
</ol>
<h3 id="4-CAN在STM32"><a href="#4-CAN在STM32" class="headerlink" title="4.CAN在STM32"></a>4.CAN在STM32</h3><ol>
<li><p>关于采样点和位时序</p>
<p>见STM32F4中文参考手册 P622</p>
<p>一个位相当于是一帧数据，控制位时序相当于就是控制一帧数据的时间长度，再将这个时间长度取倒数就得到了波特率。</p>
<p>这些位都是由最小的时间单元组成，称为一个 time quantum，也就是 1tq</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261157469.png"
                      alt="image-20250126115740427"
                ></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261157188.png"
                      alt="image-20250126115757140"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261158282.png"
                      alt="image-20250126115810229"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261159516.png"
                      alt="image-20250126115936455"
                ></p>
<p>那么在实际程序中，就需要控制好这些位时序使得波特率正确</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">CAN_InitStructure.CAN_SJW=CAN_SJW_1tq;  <span class="comment">//重新同步跳跃宽度(Tsjw)为tsjw+1个时间单位 CAN_SJW_1tq~CAN_SJW_4tq</span></span><br><span class="line">CAN_InitStructure.CAN_BS1=CAN_BS1_10tq;  <span class="comment">//Tbs1范围CAN_BS1_1tq ~CAN_BS1_16tq</span></span><br><span class="line">CAN_InitStructure.CAN_BS2=CAN_BS2_3tq;  <span class="comment">//Tbs2范围CAN_BS2_1tq ~   CAN_BS2_8tq</span></span><br><span class="line">CAN_InitStructure.CAN_Prescaler = <span class="number">3</span>;    <span class="comment">//分频系数(Fdiv)为brp+1</span></span><br></pre></td></tr></table></figure></div>

<p>因为该板子上的 CAN 是挂载在 APB1 时钟上，分频就是 42Mhz，再分完频就是 14Mhz，所以一个 tp 就是 $\frac{1}{14Mhz}$，而在上述代码中设置了总共 14 个 tp，所以一个位的时间长度是 $\frac{1}{1Mhz}$ ，所以波特率就是 1Mhz</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261159516.png"
                      alt="image-20250126115936455"
                ></p>
<p>由上图可以看到，SYNC_SEG 和 BS1 结束后为采样点，一般来说把采样点控制在 80% 左右比较合适</p>
<ol start="2">
<li><p>滤波器</p>
<p><strong>不管是否直接使用滤波器都要配好！</strong></p>
<p>如下图可见，CAN2不能控制筛选器，如果有CAN2的话，在使用CAN2之前一定要先使能 CAN1的时钟    中文参考手册 P609</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261203554.png"
                      alt="image-20250126120322497"
                ></p>
<p>其中筛选器就是用来筛选有着固定ID的信息，减小总线负担</p>
<aside> 💡

<p>CAN1是主CAN,其他的CAN如果没有先使能CAN1就会无法正常运行</p>
</aside></li>
</ol>
]]></content>
      <tags>
        <tag>嵌入式 STM32 CAN</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言的多文件编程</title>
    <url>/2023/09/02/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<ol>
<li><p>多文件编程原理</p>
<p> C++在编译多文件程序时，首先将每一个文件单独编译，然后通过链接将各个文件组合成一个可执行程序</p>
<p> 可以将函数的声明放到头文件中去，而在主文件中引用头文件就相当于将头文件中内容拷贝到主文件中再进行编译</p>
<p> <a class="link"   href="https://blog.csdn.net/chen_z_p/article/details/105352547" >我终于把C++多文件编程理解透彻了-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>关于头文件</p>
<p> 后缀为 .h 的文件，<mark>记得将其放置在条件编译预处理语句中 </mark>，防止因为依赖关系被多次包含</p>
</li>
</ol>
<p>​		函数声明：显然应该放在头文件中，前面很清楚。<br>​		类定义、结构定义：用函数定义的逻辑想，似乎不能放在头文件中。但它<mark>应该放在头文件</mark>。第一，每个cpp文件应该有一个定义，	在编译的时候编译器才知道怎么为对象分配空间。其次，类型定义不会在内存上分配空间。  </p>
<p>​		模板函数：编译器必须在编译的时候根据函数模板实例化对应的函数，所以应该放在头文件。   </p>
<p>​		内联函数：编译期间被插到调用位置，所以也要放在头文件。</p>
<p>​		<mark>函数定义：不要！</mark>C++规定一个程序同签名的函数只能有一个定义。如果你把函数定义放在头文件，并且同一个程序的多个cpp	文件包含了该头文件，这样，在链接的时候会发现多个定义版本，链接报错。</p>
<p>​		<mark>变量定义：不要！</mark>与上面类似，被多个文件包含的时候会出现多次定义同一个变量，链接错误。但是，static变量和extern变量 	可以，以及宏定义的常量，因为这些在多个文件出现并不会出错。</p>
<ol start="3">
<li><p>使用命令行运行多文件项目</p>
 <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">g++ main.cpp fun.cpp -o out   #列举所有要编译的文件</span><br></pre></td></tr></table></figure></div>

</li>
<li><p>使用  vscode 编译多文件项目</p>
<p> 在安装好一众插件的 vscode 环境中，在主文件开头使用 #include “” 的方式来引入头文件和预编译文件</p>
 <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*实例项目*/</span></span><br><span class="line"><span class="comment">// main.c   主文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;print.h&quot;</span>      <span class="comment">//这个里面放所有的函数声明和库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;print.c&quot;</span>      <span class="comment">//这里面放所有的函数定义</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Print(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fuction.c  用来放所有函数的定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;function.h&quot;</span>		<span class="comment">//记得要引入头文件</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//function.h	这个头文件用来声明函数，应用包</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>          </span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HEAD_H					<span class="comment">//条件编译预处理语句</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEAD_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p> 最后直接在主文件中运行就可以了</p>
</li>
<li><p>使用 cmake 编译多文件项目</p>
</li>
<li><p>多文件编程中 extern 的使用</p>
</li>
</ol>
<p>extern表示改变量是定义在其他文件中的，在多文件情况下最标准的方式是：</p>
<p>在 .c文件中声明变量， 在其对应的 .h 文件中使用extern声明变量，这样其他地方要用这个变量时只需要 include 一下这个 .h文件即可</p>
<blockquote>
<p>注意！在.c中声明变量是可以顺便初始化值，但extern的时候就不要这么干了不然会显示重复定义！</p>
</blockquote>
]]></content>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>MIT计算机教育缺失一课之shell使用</title>
    <url>/2025/02/07/MIT%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E8%82%B2%E7%BC%BA%E5%A4%B1%E4%B8%80%E8%AF%BE%E4%B9%8Bshell%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="课程链接"><a href="#课程链接" class="headerlink" title="课程链接"></a>课程链接</h3><p><a class="link"   href="https://space.bilibili.com/518734451/favlist?fid=2359650951&ftype=create" >刘黑黑a的个人空间-刘黑黑a个人主页-哔哩哔哩视频 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1vt4y1R71v/?spm_id_from=333.337.search-card.all.click&vd_source=83f58304f59c0181e00c002b63d6d5f9" >MIT 计算机教育中缺失的一课 (中英双字幕)、时间顶级名校最详细计算机知识讲解…_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://missing-semester-cn.github.io/" >计算机教育中缺失的一课 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="shell、工具、脚本"><a href="#shell、工具、脚本" class="headerlink" title="shell、工具、脚本"></a>shell、工具、脚本</h2><p>Bash 中的字符串通过 <code>&#39;</code> 和 <code>&quot;</code> 分隔符来定义，但是它们的含义并不相同。以 <code>&#39;</code> 定义的字符串为原义字符串，其中的变量不会被转义，而 <code>&quot;</code> 定义的字符串会将变量值进行替换。</p>
<p>eg:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">foo = bar #打印barecho &#x27;$foo&#x27;</span><br><span class="line">echo &quot;$foo&quot;   # 打印 $foo</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="shell的通配（globbing）"><a href="#shell的通配（globbing）" class="headerlink" title="shell的通配（globbing）"></a>shell的通配（globbing）</h2><ol>
<li><p>通配符</p>
<p>可以使用？或者*来匹配字符</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">例如，对于文件 foo, foo1, foo2, foo10 和 bar, <span class="built_in">rm</span> foo? 这条命令会删除 foo1 和 foo2 ，而 <span class="built_in">rm</span> foo* 则会删除除了 bar 之外的所有文件。</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>花括号</p>
<p>当你有一系列的指令，其中包含一段公共子串时，可以用花括号来自动展开这些命令。这在批量移动或转换文件时非常方便。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">convert image.&#123;png,jpg&#125;</span><br><span class="line"><span class="comment"># 会展开为</span></span><br><span class="line">convert image.png image.jpg</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> /path/to/project/&#123;foo,bar,baz&#125;.sh /newpath</span><br><span class="line"><span class="comment"># 会展开为</span></span><br><span class="line"><span class="built_in">cp</span> /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以结合通配使用</span></span><br><span class="line"><span class="built_in">mv</span> *&#123;.py,.sh&#125; folder</span><br><span class="line"><span class="comment"># 会移动所有 *.py 和 *.sh 文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> foo bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面命令会创建 foo/a, foo/b, ... foo/h, bar/a, bar/b, ... bar/h 这些文件</span></span><br><span class="line"><span class="built_in">touch</span> &#123;foo,bar&#125;/&#123;a..h&#125;</span><br><span class="line"><span class="built_in">touch</span> foo/x bar/y</span><br><span class="line"><span class="comment"># 比较文件夹 foo 和 bar 中包含文件的不同</span></span><br><span class="line">diff &lt;(<span class="built_in">ls</span> foo) &lt;(<span class="built_in">ls</span> bar)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># &lt; x</span></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"><span class="comment"># &gt; y</span></span><br></pre></td></tr></table></figure></div>



<blockquote>
<p>shellcheck工具可以帮助查找sh&#x2F;bash脚本中的错误</p>
</blockquote>
</li>
<li><p>shell的解释行（shebang）</p>
<p><a class="link"   href="https://blog.csdn.net/weixin_43999327/article/details/104553431" >Linux - 认识shell的解释行（Shebang）-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>为脚本指定运行环境，无需在调用时由用户指定解释器，从而对用户和其它程序隐藏其实现细节</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/local/bin/python</span></span><br><span class="line"><span class="comment"># 第一行就是把该脚本的运行环境指定到python上去</span></span><br><span class="line">import sys</span><br><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> reversed(sys.argv[1:]):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 如下列出了一些典型的shebang解释器指令：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/sh—使用sh，即Bourne shell或其它兼容shell执行脚本</span></span><br><span class="line"><span class="comment">#!/bin/csh—使用csh，即C shell执行</span></span><br><span class="line"><span class="comment">#!/usr/bin/perl -w—使用带警告的Perl执行</span></span><br><span class="line"><span class="comment">#!/usr/bin/python -O—使用具有代码优化的Python执行</span></span><br><span class="line"><span class="comment">#!/usr/bin/php—使用PHP的命令行解释器执行</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>tldr网站与GUI工具</p>
<p>too long ,don’t read!</p>
<blockquote>
<p>man命令的简易替代版本（man命令显示的过于长和多了）</p>
</blockquote>
<p><a class="link"   href="https://tldr.inbrowser.app/" >tldr InBrowser.App <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install tldr <span class="comment">#直接sudo apt安装就可以用的</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Jlink-RTT扫频</title>
    <url>/2025/02/07/Jlink-RTT%E6%89%AB%E9%A2%91/</url>
    <content><![CDATA[<blockquote>
<p>可提供操作系统级别的采样速度，远远大于jscope和vofa正常的串口通信，用于参数辨识+控制设计</p>
</blockquote>
<h1 id="1-啁啾信号"><a href="#1-啁啾信号" class="headerlink" title="1.啁啾信号"></a>1.啁啾信号</h1><p>定义：频率随着时间增加或减小的信号。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070923561.png"
                      alt="image-20250207092323502"
                ></p>
<p>使用C实现：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> chirp = <span class="number">0</span>;<span class="comment">//啁啾信号</span></span><br><span class="line"><span class="type">float</span> chirp_zero_phase= <span class="number">0</span>;<span class="comment">//初始相位</span></span><br><span class="line"><span class="type">float</span> chirp_f0 = <span class="number">0</span>;<span class="comment">//初始频率</span></span><br><span class="line"><span class="type">float</span> chirp_k = <span class="number">0.0025</span>;<span class="comment">//频率变化率</span></span><br><span class="line"><span class="type">float</span> <span class="type">chirp_t</span> = <span class="number">0</span>;</span><br><span class="line"><span class="type">float</span> chirp_f = <span class="number">0</span>;<span class="comment">//信号频率</span></span><br><span class="line"><span class="type">float</span> Chrip_Amplitude = <span class="number">6000</span>;<span class="comment">//信号幅值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Make_Chirp</span><span class="params">(<span class="type">int</span> t)</span></span><br><span class="line">&#123;</span><br><span class="line"> chirp_f = chirp_f0 + chirp_k * t;</span><br><span class="line">  chirp = Chrip_Amplitude*sinf(chirp_zero_phase + <span class="number">2</span> * PI*</span><br><span class="line">(chirp_f0+chirp_k*<span class="number">0.5f</span>*t)* t/<span class="number">1000</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用1ms定时器中断运行产生啁啾信号函数，运行120s，产生0-300Hz的幅值为6000的啁啾信号，图像如图所示。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070924372.png"
                      alt="image-20250207092448336"
                ></p>
<blockquote>
<p>香农采样定理：要想根据采样准确的再现信号，信号中必须不含有高于1&#x2F;2采样速率的频率成分。</p>
</blockquote>
<h1 id="2-Jlink-RTT"><a href="#2-Jlink-RTT" class="headerlink" title="2.Jlink RTT"></a>2.Jlink RTT</h1><p>系统运行频率为1kHz，频率最大值可以根据香农采样定理初步确定为500Hz以下，然后可以根据系统具 体情况确定扫频最大频率。</p>
<blockquote>
<p>Jlink RTT耗费系统资源少，不影响系统的实时性。RTT的性能明显高于其他将数据输出到主机的模式。平均一行文本可以在1微秒或更短的时间内输出。基本上相当于做一个memcopy()的时间。RTT速度由调用发送函数的速度决定，速度可以达到很高。局限在于无法通过曲线直观观察数据，无法用于在线调试。但用来做参数辨识及更细的分析很合适</p>
</blockquote>
<h2 id="2-1-移植RTT"><a href="#2-1-移植RTT" class="headerlink" title="2.1 移植RTT"></a>2.1 移植RTT</h2><p>RTT源码包在JLINK驱动的目录中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070926799.png"
                      alt="image-20250207092648751"
                ></p>
<p>将RTT文件夹复制到工程文件夹中，并在工程中新建RTT分组，将RTT文件中两个.c文件添加进来，并在魔术棒中添加RTT的头文件路径。之后可以正常使用Jlink RTT</p>
<h2 id="2-2-使用RTT"><a href="#2-2-使用RTT" class="headerlink" title="2.2 使用RTT"></a>2.2 使用RTT</h2><p>常用函数 SEGGER_RTT_SetTerminal(unsigned char TerminalId) 该函数传入参数为终端ID，在Jlink RTT Viewer中可以打开不同终端窗口查看数据，同时在初始窗口中会 显示所有终端数据。 SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, …) 该函数用于打印数据，常用参数格式为</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">%[flags][Fieldwidth][.Precision]ConversionSpecifier</span><br><span class="line">    Supported flags:</span><br><span class="line">          -: 字段宽度内左对齐</span><br><span class="line">          +: 为有符号参数打印符号</span><br><span class="line">          <span class="number">0</span>: 用<span class="number">0</span>代替空格. 使用“-”或精度时忽略</span><br><span class="line">    Supported conversion specifiers:</span><br><span class="line">          c: 将参数打印为一个字符</span><br><span class="line">          d: 将参数打印为有符号整数</span><br><span class="line">          u: 将参数打印为无符号整数</span><br><span class="line">          x: 将参数打印为十六进制整数</span><br><span class="line">          s: 打印参数指向的字符串</span><br><span class="line">          p: 将参数打印为 <span class="number">8</span> 位十六进制整数.(参数应该是一个指向 <span class="type">void</span> 的指针)</span><br></pre></td></tr></table></figure></div>

<p>打印整型（u8 u16 u32 s8 s16 s32）时使用“d” 打印字符串时使用“s” 打印浮点数时，使用out_float函数将float型转换为字符串后打印。或通过在SEGGER_RTT_vprintf中添 加下列代码实现：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SEGGER_RTT_PRINT_FLOAT_ENABLE</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">float</span> fv;</span><br><span class="line">            fv = (<span class="type">float</span>)va_arg(*pParamList, <span class="type">double</span>);    <span class="comment">//取出输入的浮点数值</span></span><br><span class="line">            v = (<span class="type">int</span>)fv;                                <span class="comment">//取整数部分</span></span><br><span class="line">            _PrintInt(&amp;BufferDesc, v, <span class="number">10u</span>, NumDigits, FieldWidth, FormatFlags); </span><br><span class="line"><span class="comment">//显示整数，支持负数</span></span><br><span class="line">            _StoreChar(&amp;BufferDesc, <span class="string">&#x27;.&#x27;</span>);                                       </span><br><span class="line"> <span class="comment">//显示小数点</span></span><br><span class="line">            v = <span class="built_in">abs</span>((<span class="type">int</span>)(fv * <span class="number">100</span>));               </span><br><span class="line">            v = v % <span class="number">100</span>;</span><br><span class="line">            _PrintInt(&amp;BufferDesc, v, <span class="number">10u</span>, <span class="number">2</span>, FieldWidth, FormatFlags);         </span><br><span class="line"> <span class="comment">//显示小数点后两位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//para:</span></span><br><span class="line"><span class="comment">//value:the floating number </span></span><br><span class="line"><span class="comment">//decimal_digit: Fractional part length</span></span><br><span class="line"><span class="comment">//output_length: length of output data</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *<span class="title function_">out_float</span><span class="params">(<span class="type">double</span> value, <span class="type">unsigned</span> <span class="type">char</span> decimal_digit, <span class="type">unsigned</span> </span></span><br><span class="line"><span class="params"><span class="type">char</span> *output_length)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">char</span> _output[<span class="number">20</span>];</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> integer;<span class="comment">//整数部分</span></span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> decimal;<span class="comment">//小数部分</span></span><br><span class="line"> <span class="type">unsigned</span> <span class="type">char</span> _output_length = <span class="number">0</span>;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">char</span> _length_buff = <span class="number">0</span>;</span><br><span class="line"> <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> *return_pointer;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">char</span> signal_flag;</span><br><span class="line"> <span class="keyword">if</span> (value &lt; <span class="number">0</span>)</span><br><span class="line">  signal_flag = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">  signal_flag = <span class="number">0</span>;</span><br><span class="line"> value = <span class="built_in">fabs</span>(value);</span><br><span class="line"> integer = (<span class="type">unsigned</span> <span class="type">long</span>)value;</span><br><span class="line"> decimal = (<span class="type">unsigned</span> <span class="type">long</span>)((value - integer) * <span class="built_in">pow</span>(<span class="number">10.0</span>, decimal_digit));</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> integer_buff = integer;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> decimal_buff = decimal;</span><br><span class="line"> <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span> (integer / <span class="number">10</span> != <span class="number">0</span>)</span><br><span class="line">  _length_buff++;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> _length_buff++;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> integer = integer / <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; _length_buff; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span> (i == _length_buff - <span class="number">1</span>)</span><br><span class="line">  _output[_output_length] = integer_buff % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//_output[_output_length] = integer_buff / 10 % 10 + 0x30;</span></span><br><span class="line">  _output[_output_length] = integer_buff / (<span class="type">unsigned</span> <span class="type">long</span>)<span class="built_in">pow</span>(<span class="number">10.0</span>, </span><br><span class="line">_length_buff - i - <span class="number">1</span>) % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line"> integer_buff = integer_buff % (<span class="type">unsigned</span> <span class="type">long</span>)<span class="built_in">pow</span>(<span class="number">10.0</span>, _length_buff </span><br><span class="line">- i - <span class="number">1</span>);</span><br><span class="line"> <span class="comment">//integer_buff = integer_buff % 10;</span></span><br><span class="line"> &#125;</span><br><span class="line"> _output_length++;</span><br><span class="line"> &#125;</span><br><span class="line"> _output[_output_length] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"> _output_length++;</span><br><span class="line"> _length_buff = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">if</span> (decimal / <span class="number">10</span> != <span class="number">0</span>)</span><br><span class="line">  _length_buff++;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> _length_buff++;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> decimal = decimal / <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; _length_buff; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span> (i == _length_buff - <span class="number">1</span>)</span><br><span class="line">  _output[_output_length] = decimal_buff % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  _output[_output_length] = decimal_buff / (<span class="type">unsigned</span> <span class="type">long</span>)<span class="built_in">pow</span>(<span class="number">10.0</span>, </span><br><span class="line">_length_buff-i<span class="number">-1</span>) % <span class="number">10</span> + <span class="number">0x30</span>;</span><br><span class="line"> decimal_buff = decimal_buff % (<span class="type">unsigned</span> <span class="type">long</span>)<span class="built_in">pow</span>(<span class="number">10.0</span>, _length_buff </span><br><span class="line">- i - <span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> _output_length++;</span><br><span class="line"> &#125;</span><br><span class="line"> _output[_output_length] = <span class="number">0x00</span>;</span><br><span class="line"> _output_length++;</span><br><span class="line"> return_pointer = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">realloc</span>(return_pointer,_output_length);</span><br><span class="line">*output_length = _output_length - <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span> (return_pointer == <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span> (signal_flag == <span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> return_pointer[<span class="number">0</span>] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"> <span class="built_in">memcpy</span>(return_pointer+<span class="number">1</span>, _output, _output_length);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">memcpy</span>(return_pointer, _output, _output_length);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> return_pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3.使用示例"></a>3.使用示例</h1><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SEGGERRTTTask</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> timestamp = TIM5-&gt;CNT;</span><br><span class="line"> <span class="keyword">if</span>(RTT_Send_flag)</span><br><span class="line"> &#123;</span><br><span class="line">		SEGGER_RTT_SetTerminal(<span class="number">0</span>);<span class="comment">//设置终端ID</span></span><br><span class="line">	  SEGGER_RTT_printf(<span class="number">0</span>,<span class="string">&quot;Des = %s \n&quot;</span>, out_float(g_stGM_YawSpeedPID.fpDes,<span class="number">4</span>,&amp;length));<span class="comment">//r</span></span><br><span class="line">		SEGGER_RTT_printf(<span class="number">0</span>,<span class="string">&quot;U = %s \n&quot;</span>, out_float(g_stGM_YawSpeedPID.fpU,<span class="number">4</span>,&amp;length));<span class="comment">//pidu</span></span><br><span class="line"></span><br><span class="line">		SEGGER_RTT_SetTerminal(<span class="number">1</span>);</span><br><span class="line">		SEGGER_RTT_printf(<span class="number">0</span>,<span class="string">&quot;FB = %s \n&quot;</span>, out_float(g_stGM_YawSpeedPID.fpFB,<span class="number">4</span>,&amp;length));<span class="comment">//y_flt</span></span><br><span class="line">     SEGGER_RTT_printf(<span class="number">0</span>,<span class="string">&quot;YY = %s \n&quot;</span>, out_float(g_stGM_YawSpeedPID.fpFB,<span class="number">4</span>,&amp;length));<span class="comment">//y_raw</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>一般使用JLinkRTTViewer观看数据</p>
<blockquote>
<p>过低版本的jlink可能不自带RTT Viewer的安装包，如果在jlink的安装文件夹里面找不到RTTViewer的话升个版本就行</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070928278.png"
                      alt="image-20250207092827230"
                ></p>
<p>将Specify Target Device选为对应的型号 Target Interface &amp; Speed选为对应的接口。</p>
<p>关于最后的RTT Control Block的Address，可以通过工程编译生成的.map文件（双击HITCRT_ENGINEER_2024即可打开）查看</p>
<p>[]: <a class="link"   href="https://blog.csdn.net/qq_38295600/article/details/129331670" >https://blog.csdn.net/qq_38295600/article/details/129331670 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>	“查看MAP”</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070929305.png"
                      alt="image-20250207092940265"
                ></p>
<p>在文件中查询_SEGGER_RTT得到类似下面的代码</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">_SEGGER_RTT  <span class="number">0x20002f50</span>  Data  <span class="number">168</span>  segger_rtt.o(.bss)</span><br></pre></td></tr></table></figure></div>

<p>其中0x20002f50即为the address of the RTT Control block。</p>
<p>连接后就可以观看JLink RTT发送的数据。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070930254.png"
                      alt="image-20250207093006207"
                ></p>
<p>使用JLinkRTTViewer导出数据时，可以点击工具栏中Logging-&gt;Start Terminals Logging，之后Terminals中的数据就会被存储在.log文件中，之后再次点击Logging-&gt;Stop Terminals Logging终止数据记录。</p>
<p>如果数据更新不正常可以修改浮点数精度</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42466  0.0  0.0  0.0  0.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42468  0.0  0.0  0.0  0.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42470  0.0  0.0  0.0  0.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42472  0.0  0.0  0.0  0.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42474  0.0  0.0  0.0  0.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42476  0.5  11.600  299.899  5803.935</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42478  0.29  34.793  299.700  5800.202</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42480  0.98  81.148  299.500  5784.846</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42482  0.284  173.781  299.299  5746.227</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42484  0.747  358.877  299.100  5661.67</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42486  1.859  728.712  298.899  5482.806</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42488  4.452  1467.655  298.700  5118.334</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42492  10.384  2946.81  298.300  4387.412</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42496  53.297  11787.771  297.900  -68.46</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42500  118.456  23579.550  297.500  -6031.500</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42504  567.645  94098.648  297.100  -41811.968</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42508  1230.136  188146.62  296.500  -185136.546</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42514  5672.13  751090.0  295.900  -758900.125</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42520  25687.847  2998271.750  295.300  -3055603.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42528  241244.750  23896540.0  294.300  -24520456.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42536  1061137.875  190583856.0  293.500  -98301464.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42546  9632197.0  1519956224.0  292.300  -1574043008.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42558  178292192.0  3540067328.0  291.100  -4037248000.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42570  1572560768.0  4164190208.0  289.899  -321142784.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42582  2459584512.0  3717332992.0  288.700  -2777284608.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42594  3926392832.0  3791650816.0  287.500  -4118806528.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42606  1244397568.0  369098752.0  286.299  -1610612736.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42618  3019898880.0  2684354560.0  285.100  -0.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42628  2415919104.0  2147483648.0  284.100  -0.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42638  3489660928.0  0.0  283.299  -0.0</span> </span><br><span class="line"><span class="meta prompt_">0&gt; </span><span class="language-bash"> 42644  3221225472.0  0.0  282.699  -0.0</span> </span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>demo</title>
    <url>/2023/09/02/demo/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. <span id="more"></span></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>Typora 笔记</title>
    <url>/2023/09/02/Typora%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h4><p>按下ctrl+1~可以输入六级大小的标题</p>
<h4 id="2-分隔符"><a href="#2-分隔符" class="headerlink" title="2. 分隔符"></a>2. 分隔符</h4><p>按下 *** +++ — 都可以创造一个分隔符</p>
<hr>
<p>+++</p>
<hr>
<h4 id="3-下划线"><a href="#3-下划线" class="headerlink" title="3. 下划线"></a>3. 下划线</h4><p><u>按下 ctrl + u</u></p>
<h4 id="4-删除线"><a href="#4-删除线" class="headerlink" title="4. 删除线"></a>4. 删除线</h4><p>文字前后都加上 ~~   <del>就像这样</del></p>
<h4 id="5-斜体"><a href="#5-斜体" class="headerlink" title="5. 斜体"></a>5. 斜体</h4><p>文字前后都加上 一个 *	<em>就像这样</em></p>
<p>快捷键是 ctrl + i</p>
<h4 id="6-加粗"><a href="#6-加粗" class="headerlink" title="6. 加粗"></a>6. 加粗</h4><p>文字前后都加上两个 *  	<strong>就像这样</strong></p>
<p>或者直接 ctrl+ 文字	就像这样</p>
<h4 id="7-高亮"><a href="#7-高亮" class="headerlink" title="7. 高亮"></a>7. 高亮</h4><p>文字前后都加上&#x3D;&#x3D; 			&#x3D;&#x3D;就像这样&#x3D;&#x3D;</p>
<h4 id="8-下标"><a href="#8-下标" class="headerlink" title="8. 下标"></a>8. 下标</h4><p>就像这样 	H<del>2</del>O  在 H 和O之间加上~</p>
<h4 id="9-上标"><a href="#9-上标" class="headerlink" title="9. 上标"></a>9. 上标</h4><p>就像这样 		i^2^	在 i  和 2 后面都加上~</p>
<h4 id="10-引用"><a href="#10-引用" class="headerlink" title="10. 引用"></a>10. 引用</h4><p>就用一个大于号</p>
<blockquote>
<p>就像这样  </p>
</blockquote>
<h4 id="11-特殊语法块（代码块）"><a href="#11-特殊语法块（代码块）" class="headerlink" title="11. 特殊语法块（代码块）"></a>11. 特殊语法块（代码块）</h4><p>用三个 &#96;&#96;&#96; 再加上代码种类</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="12-链接"><a href="#12-链接" class="headerlink" title="12. 链接"></a>12. 链接</h4><p>​	1. 外部链接</p>
<p>​				[ ] 里面加上链接显示的名称，后面的 ( ) 里面加上链接本体	<a href="%5B(8%E6%9D%A1%E6%B6%88%E6%81%AF">本笔记原来源</a> Typora一站式使用教程，成为Markdown大佬，看这一篇就够了_typora用来干什么_飞Link的博客-CSDN博客](<a class="link"   href="https://blog.csdn.net/feizuiku0116/article/details/119898062" >https://blog.csdn.net/feizuiku0116/article/details/119898062 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>))</p>
<ol start="2">
<li><p>内部链接跳转</p>
<p>​		[ ] 里面加上链接显示的名称，后面的 ( ) 里面加上链接本体, 比如标题##啥啥 [12节链接](# 12.链接)</p>
</li>
</ol>
<h4 id="13-图片"><a href="#13-图片" class="headerlink" title="13. 图片"></a>13. 图片</h4><p>[ ] 里面加上链接显示的名称，后面的 ( ) 里面加上图片链接或者本地存储路径</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261131214.png"
                      alt="2023-07-21_085124-16899007513061"
                ></p>
<h4 id="14-typora-的-css-美化"><a href="#14-typora-的-css-美化" class="headerlink" title="14. typora 的 css 美化"></a>14. typora 的 css 美化</h4><p>在typora的文件-&gt;偏好设置-&gt;外观-&gt;主题中可以选择心仪的主题，而主题可以在 Typora皮肤官网下载（记得使用魔法）。</p>
<p>而皮肤的安装可以在主题选项中打开主题文件夹，把主题的css 文件直接 copy过去即可~</p>
<p>关于 css 的自己美化和设置，有待学习，但似乎已经存在的主题已经足够好看</p>
]]></content>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>hello_world_in_ROS2</title>
    <url>/2024/09/07/ROS2/</url>
    <content><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ol>
<li><p>创建工作空间</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p helloworld/src <span class="comment">#创建目录</span></span><br><span class="line"><span class="built_in">cd</span> helloworld</span><br><span class="line">colcon build --package-select filename</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建功能包</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> src</span><br><span class="line">ros2 pkg create pkg01_helloworld_cpp（功能包名）...</span><br><span class="line">--build-type ament_cmake... <span class="comment">#创建类型，如果是python就是ament_python</span></span><br><span class="line">--dependencies rclcpp...   <span class="comment">#(添加依赖)</span></span><br><span class="line">--node-name helloworld （可执行文件名）</span><br><span class="line"></span><br><span class="line">ros2 pkg create pkg01_helloworld_cpp--build-type ament_cmake --dependencies rclcpp --node-name helloworld</span><br></pre></td></tr></table></figure></div>

<p>node名最好与工作空间名一致</p>
</li>
<li><p>写源文件</p>
</li>
<li><p>配置文件后编译</p>
<p>pakage.xml  主要看  <depend>rclcpp</depend></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070941146.png"
                      alt="image-20250207094112087"
                ></p>
<p>编译就还是回到主工作空间里面：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">colcon build</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行代码</p>
</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>创建工作空间</span></figcaption><table><tr><td class="code"><pre><span class="line">source install/setup.bash</span><br><span class="line">ros2 run pkg_01_helloworld_cpp(功能包名) helloworld(可执行文件名)</span><br></pre></td></tr></table></figure></div>

<h2 id="2-ROS2中的初始化和资源释放"><a href="#2-ROS2中的初始化和资源释放" class="headerlink" title="2. ROS2中的初始化和资源释放"></a>2. ROS2中的初始化和资源释放</h2><p>在 C++ 中，需要进行初始化和资源释放的过程主要有以下几个原因：</p>
<h3 id="1-资源管理"><a href="#1-资源管理" class="headerlink" title="1. 资源管理"></a>1. 资源管理</h3><p>C++ 是一种手动管理资源的编程语言，这意味着程序员需要显式地分配和释放内存和其他资源。初始化和资源释放是确保资源正确管理的重要步骤，防止内存泄漏和资源枯竭。</p>
<ul>
<li><strong>初始化</strong>：在程序开始时初始化资源，如内存、文件句柄、网络连接等。</li>
<li><strong>资源释放</strong>：在程序结束或不再需要资源时释放这些资源，确保系统资源可以被其他程序使用。</li>
</ul>
<h3 id="2-防止资源泄漏"><a href="#2-防止资源泄漏" class="headerlink" title="2. 防止资源泄漏"></a>2. 防止资源泄漏</h3><p>资源泄漏是指程序运行过程中分配的资源没有正确释放，导致资源无法被重新利用，最终可能耗尽系统资源。通过适当地初始化和释放资源，可以有效防止资源泄漏。</p>
<h3 id="3-确保程序稳定和高效运行"><a href="#3-确保程序稳定和高效运行" class="headerlink" title="3. 确保程序稳定和高效运行"></a>3. 确保程序稳定和高效运行</h3><p>正确的资源管理可以确保程序稳定和高效地运行，减少崩溃和性能下降的风险。例如，在 ROS 2 中，初始化和关闭过程确保了节点之间的通信正常进行和正确终止。</p>
<h3 id="4-ROS-2-特定原因"><a href="#4-ROS-2-特定原因" class="headerlink" title="4. ROS 2 特定原因"></a>4. ROS 2 特定原因</h3><p>在 ROS 2 中，初始化和资源释放尤其重要，因为它涉及到多个节点之间的通信和协调。具体原因包括：</p>
<ul>
<li><strong>初始化</strong>：<code>rclcpp::init(argc, argv);</code> 初始化 ROS 2 客户端库，确保所有相关组件正确设置，以便节点可以正常工作。这包括设置上下文、解析参数等。</li>
<li><strong>资源释放</strong>：<code>rclcpp::shutdown();</code> 关闭 ROS 2 客户端库，确保所有资源正确释放，所有节点之间的通信正常终止。这对于避免资源泄漏和确保程序正确退出至关重要。</li>
</ul>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>以下是 ROS 2 节点示例代码的详细解释：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">cpp复制代码</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rclcpp/rclcpp.hpp&quot;</span>int main(int argc, char **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 初始化 ROS 2 客户端</span></span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建节点指针</span></span><br><span class="line">    <span class="keyword">auto</span> node = std::<span class="built_in">make_shared</span>&lt;rclcpp::Node&gt;(<span class="string">&quot;helloworld_node_cpp&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出日志</span></span><br><span class="line">    <span class="built_in">RCLCPP_INFO</span>(node-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ol>
<li>**<code>rclcpp::init(argc, argv);</code>**：初始化 ROS 2 客户端库，设置上下文环境，解析命令行参数，确保节点可以正常运行。</li>
<li>**<code>auto node = std::make_shared&lt;rclcpp::Node&gt;(&quot;helloworld_node_cpp&quot;);</code>**：创建一个 ROS 2 节点，节点名称为 <code>helloworld_node_cpp</code>。</li>
<li>**<code>RCLCPP_INFO(node-&gt;get_logger(), &quot;Hello, world!&quot;);</code>**：使用日志记录器输出一条信息。</li>
<li>**<code>rclcpp::shutdown();</code>**：关闭 ROS 2 客户端库，释放所有资源，确保程序正常终止。</li>
</ol>
<p>通过这些步骤，可以确保 ROS 2 节点在初始化后正常工作，并在结束时正确释放资源。</p>
]]></content>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>光的衍射与干涉装置总结</title>
    <url>/2023/09/02/%E5%85%89%E7%9A%84%E8%A1%8D%E5%B0%84%E4%B8%8E%E5%B9%B2%E6%B6%89%E8%A3%85%E7%BD%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>z</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261109959.png"
                      alt="image-20231016230036374"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261109856.png"
                      alt="image-20231016230053777"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261117800.png"
                      alt="image-20231016230113246"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118971.png"
                      alt="image-20231016230131066"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118930.png"
                      alt="image-20231016230143484"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118958.png"
                      alt="image-20231016230156475"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118801.png"
                      alt="image-20231016230206976"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118392.png"
                      alt="image-20231016230226804"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261118306.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261119776.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261119980.png"
                     
                ></p>
<p>demo</p>
<p><a class="link"   href="https://wwaz.lanzoum.com/ifl3W1c089fg" >原PDF下载 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>大物拾遗录</tag>
      </tags>
  </entry>
  <entry>
    <title>Q-learning</title>
    <url>/2025/02/07/Q-learning/</url>
    <content><![CDATA[<h3 id="参考博客与论文"><a href="#参考博客与论文" class="headerlink" title="参考博客与论文"></a>参考博客与论文</h3><p><a class="link"   href="https://en.wikipedia.org/wiki/Q-learning" >Q-learning <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://ieeexplore.ieee.org/document/8836506" >Q-Learning Algorithms: A Comprehensive Classification and Applications <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><p>Q-learning 的核心是学习一个 <strong>Q 函数</strong>，该函数估计了在给定状态（State）下，采取某个动作（Action）所能获得的长期奖励的期望值。它的目标是找到一个最优策略，使得智能体在每个状态下都能选择最优动作，从而最大化累积的奖励。</p>
<p>Q 函数的定义如下：</p>
<p>Q(s,a)&#x3D;当前状态 s 下，选择动作 a 所获得的长期回报</p>
<p>其中：</p>
<ul>
<li><p>s是状态空间中的一个状态。</p>
</li>
<li><p>a是智能体在状态 s 下可以选择的动作。</p>
</li>
<li><p>Q(s,a)是智能体在状态 s 下采取动作 a 后，能够获得的期望奖励。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502071001810.png"
                      alt="image-20250207100142778"
                ></p>
</li>
</ul>
<p>其中<em>Rt+1</em>是从 state  St移动到 state  St+1时收到的奖励，α是<a class="link"   href="https://en.wikipedia.org/wiki/Learning_rate" >学习率 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>(0&lt;α≤1)。</p>
<ol>
<li><p>学习率α</p>
<p>决定了新获取的信息在多大程度上覆盖旧信息。</p>
<p>因子 0 使代理什么都学不到（专门利用先验知识），而因子 1 使代理只考虑最新的信息（忽略先验知识以探索可能性）。</p>
<p>在完全<a class="link"   href="https://en.wikipedia.org/wiki/Deterministic_system" >确定性 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>环境中，学习率 αt&#x3D;1 是最优的。</p>
<p>当问题是<a class="link"   href="https://en.wikipedia.org/wiki/Stochastic_systems" >随机 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的时，算法在某些技术条件下收敛于学习率，这要求它减少到零。在实践中，通常使用恒定的学习率，例如  αt&#x3D;0.1</p>
</li>
<li><p>衰减系数γ</p>
<p>决定了未来奖励的重要性。</p>
<p>系数为 0 将使代理仅考虑当前奖励（即rt）（在上面的更新规则中）而变得“短视”，而接近 1 的系数将使其争取长期的高奖励。如果折扣系数达到或超过 1，则作值可能会有所不同。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502071003103.png"
                      alt="γ 越大，agent对未来越了解，反之γ越小，agent越“短视” ，对未来状态的预测减弱"
                ></p>
<p>γ 越大，agent对未来越了解，反之γ越小，agent越“短视” ，对未来状态的预测减弱</p>
</li>
<li><p>epsilon探索策略</p>
<p>用于权衡探索&#x2F;利用（exploration&#x2F;exploitation）</p>
<p>探索：执行随机的动作</p>
<p>利用：</p>
<p>引用自：<a class="link"   href="https://www.jiqizhixin.com/articles/2018-04-17-3" >https://www.jiqizhixin.com/articles/2018-04-17-3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>一般情况下刚开始的Q值都默认为0, 也就是Q-TABLE中的任何值都不知道，所以需要通过随机选择动作进行大量的探索。</p>
<p>生成一个随机数，如果这个数大于epsilon，那么就会“利用”Q值进行更新（利用已知知识信息探索动作），否则我们将继续进行随机探索。</p>
<p>可见：epsilon 越大，越倾向于随机探索;  epsilon 越小，越倾向于利用已得知识</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502071004942.png"
                      alt="image-20250207100415899"
                ></p>
</li>
<li><p>确定条件下的Q-Learning的收敛性分析</p>
<p>可以证明，<a class="link"   href="https://zhuanlan.zhihu.com/p/365814943" >https://zhuanlan.zhihu.com/p/365814943 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 任意的状态动作对任意的状态动作对（s,a）,其中s∈A,a∈A，Q^(s,a)将收敛到 Q*(s,a)。其中 Q<em>就是最优策略  π</em>所对应的Q</p>
</li>
</ol>
<h2 id="2-关于On-policy和Off-policy"><a href="#2-关于On-policy和Off-policy" class="headerlink" title="2. 关于On-policy和Off-policy"></a>2. 关于On-policy和Off-policy</h2><p>在强化学习中，<strong>On-policy</strong> 和 <strong>Off-policy</strong> 主要的区别在于智能体学习的过程中，<strong>策略的更新</strong>和<strong>行为的选择</strong>是否依赖于同一策略。</p>
<ul>
<li><strong>On-policy</strong> 就像是一个学生<strong>只能根据自己当前的学习方法</strong>来学习并改进自己，所采取的学习策略直接影响自己的学习过程。</li>
<li><strong>Off-policy</strong> 就像是一个学生在学习时可以<strong>参考别人（老师或其他人的策略）</strong>，即使自己并没有按照这个策略进行学习，也能从其他人的行为中获得反馈来改进自己的策略。</li>
</ul>
<h3 id="1-On-policy（策略学习与行为选择一致）："><a href="#1-On-policy（策略学习与行为选择一致）：" class="headerlink" title="1. On-policy（策略学习与行为选择一致）："></a>1. <strong>On-policy</strong>（策略学习与行为选择一致）：</h3><p>在 On-policy 学习中，智能体在学习过程中，<strong>使用同一个策略</strong>来选择动作，并且<strong>基于这个策略的行为来更新自己的策略</strong>。也就是说，智能体的行为和它学习的策略是紧密相关的。这个策略不仅用于决策，还被用来指导更新 Q 值。</p>
<h3 id="类比："><a href="#类比：" class="headerlink" title="类比："></a>类比：</h3><p>假设你正在学习开车，你决定遵循某个驾驶技巧（比如“慢速启动，平稳加速”），你按照这个方法开车并通过经验调整你的驾驶技巧。你的驾驶技巧（策略）和你实际开车时采取的动作（行为）是相同的，你根据实际开车的表现来逐步改进技巧。</p>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><ul>
<li><strong>SARSA</strong>（State-Action-Reward-State-Action）是 On-policy 算法。在 SARSA 中，智能体在每个状态下选择一个动作，然后根据该动作的奖励和下一个状态，继续根据当前策略进行选择。策略的更新是基于智能体自己采取的动作的。</li>
</ul>
<h3 id="2-Off-policy（策略学习与行为选择不一致）："><a href="#2-Off-policy（策略学习与行为选择不一致）：" class="headerlink" title="2. Off-policy（策略学习与行为选择不一致）："></a>2. <strong>Off-policy</strong>（策略学习与行为选择不一致）：</h3><p>在 Off-policy 学习中，智能体<strong>可以根据一个策略</strong>来学习，但<strong>它不必按照这个策略来选择动作</strong>，也就是说，智能体可能会用不同的策略来选择动作，并且在学习时依赖于另一个（行为）策略的经验来更新它的学习策略。</p>
<h3 id="类比：-1"><a href="#类比：-1" class="headerlink" title="类比："></a>类比：</h3><p>现在你还是在学习开车，但是你决定向有经验的老司机请教，尽管你自己还没有完全学会这个技巧。你观察老司机是如何驾驶的，模拟他们的操作（比如“快速启动，紧急刹车”），然后自己尝试通过这些观察来改进你的驾驶技巧。这里，你学习的技巧和你实际开车时采用的方式可以不同。</p>
<h3 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h3><ul>
<li><strong>Q-learning</strong> 是 Off-policy 算法。在 Q-learning 中，智能体选择一个动作来与环境交互，并根据环境的反馈来更新 Q 值。虽然它使用 <strong>ε-贪婪策略</strong>（通过随机选择动作来探索环境），但它更新 Q 值时是基于“最优策略”（即选择最大 Q 值的动作）来学习的，不依赖于实际采取的动作。</li>
</ul>
<h3 id="Q-learning-是-Off-policy："><a href="#Q-learning-是-Off-policy：" class="headerlink" title="Q-learning 是 Off-policy："></a>Q-learning 是 <strong>Off-policy</strong>：</h3><p>Q-learning 是一种典型的 <strong>Off-policy</strong> 算法。它通过更新 Q 函数来找到最优策略，但它在选择动作时并不完全依赖于当前的 Q 函数，而是采用了 <strong>ε-贪婪策略</strong>，即有时选择随机动作（探索），有时选择 Q 值最大的动作（利用）。因此，Q-learning 中的学习与行为选择是<strong>不一致的</strong>，也就是 <strong>Off-policy</strong>。</p>
<h2 id="3-Q-Learning-demo-for-Blackjack-in-Gymnasium（二十一点）"><a href="#3-Q-Learning-demo-for-Blackjack-in-Gymnasium（二十一点）" class="headerlink" title="3. Q-Learning demo for Blackjack in Gymnasium（二十一点）"></a>3. Q-Learning demo for Blackjack in Gymnasium（二十一点）</h2><p><a class="link"   href="https://gymnasium.org.cn/introduction/train_agent/" >https://gymnasium.org.cn/introduction/train_agent/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ol>
<li><p>二十一点规则</p>
<p><a class="link"   href="https://gymnasium.org.cn/environments/toy_text/blackjack/" >https://gymnasium.org.cn/environments/toy_text/blackjack/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>具体实现</p>
<ol>
<li>训练代码</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gymnasium <span class="keyword">as</span> gym</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> BlackjackAgent <span class="keyword">import</span> BlackjackAgent  <span class="comment"># 导入 BlackjackAgent 类</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置超参数</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">n_episodes = <span class="number">100_000</span></span><br><span class="line">start_epsilon = <span class="number">1.0</span></span><br><span class="line">epsilon_decay = start_epsilon / (n_episodes / <span class="number">2</span>)  <span class="comment"># 逐步减少探索</span></span><br><span class="line">final_epsilon = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建环境</span></span><br><span class="line">env = gym.make(<span class="string">&quot;Blackjack-v1&quot;</span>, sab=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化代理</span></span><br><span class="line">agent = BlackjackAgent(</span><br><span class="line">    env=env,</span><br><span class="line">    learning_rate=learning_rate,</span><br><span class="line">    initial_epsilon=start_epsilon,</span><br><span class="line">    epsilon_decay=epsilon_decay,</span><br><span class="line">    final_epsilon=final_epsilon,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">env = gym.wrappers.RecordEpisodeStatistics(env)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于记录奖励和误差</span></span><br><span class="line">episode_rewards = []</span><br><span class="line">episode_errors = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练过程</span></span><br><span class="line"><span class="keyword">for</span> episode <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(n_episodes)):</span><br><span class="line">    obs, info = env.reset()</span><br><span class="line">    done = <span class="literal">False</span></span><br><span class="line">    total_reward = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> done:</span><br><span class="line">        action = agent.get_action(obs)</span><br><span class="line">        next_obs, reward, terminated, truncated, info = env.step(action)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新代理</span></span><br><span class="line">        agent.update(obs, action, reward, terminated, next_obs)</span><br><span class="line"></span><br><span class="line">        total_reward += reward</span><br><span class="line">        done = terminated <span class="keyword">or</span> truncated</span><br><span class="line">        obs = next_obs</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录每回合的奖励和误差</span></span><br><span class="line">    episode_rewards.append(total_reward)</span><br><span class="line">    episode_errors.append(np.mean(agent.training_error))  <span class="comment"># 记录当前回合的平均误差</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新 epsilon</span></span><br><span class="line">    agent.decay_epsilon()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练完成，绘制奖励和误差曲线</span></span><br><span class="line">fig, (ax1, ax2) = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, figsize=(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制奖励曲线</span></span><br><span class="line">ax1.plot(np.convolve(episode_rewards, np.ones(<span class="number">100</span>)/<span class="number">100</span>, mode=<span class="string">&#x27;valid&#x27;</span>), label=<span class="string">&quot;Total Reward&quot;</span>)</span><br><span class="line">ax1.set_title(<span class="string">&quot;Total Reward Over Episodes&quot;</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">&quot;Episodes&quot;</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">&quot;Reward&quot;</span>)</span><br><span class="line">ax1.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 TD 误差曲线</span></span><br><span class="line">ax2.plot(episode_errors, label=<span class="string">&quot;TD Error&quot;</span>, color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ax2.set_title(<span class="string">&quot;TD Error Over Episodes&quot;</span>)</span><br><span class="line">ax2.set_xlabel(<span class="string">&quot;Episodes&quot;</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">&quot;TD Error&quot;</span>)</span><br><span class="line">ax2.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================== 方法二：测试智能体性能 ================== #</span></span><br><span class="line">test_episodes = <span class="number">1000</span>  <span class="comment"># 运行 1000 回合</span></span><br><span class="line">total_wins = <span class="number">0</span></span><br><span class="line">total_games = <span class="number">0</span></span><br><span class="line">total_rewards = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(test_episodes):</span><br><span class="line">    obs, info = env.reset()</span><br><span class="line">    done = <span class="literal">False</span></span><br><span class="line">    total_reward = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> done:</span><br><span class="line">        action = np.argmax(agent.q_values[obs])  <span class="comment"># 选择最优策略</span></span><br><span class="line">        obs, reward, terminated, truncated, info = env.step(action)</span><br><span class="line">        total_reward += reward</span><br><span class="line">        done = terminated <span class="keyword">or</span> truncated</span><br><span class="line"></span><br><span class="line">    total_rewards.append(total_reward)</span><br><span class="line">    <span class="keyword">if</span> total_reward &gt; <span class="number">0</span>:</span><br><span class="line">        total_wins += <span class="number">1</span></span><br><span class="line">    total_games += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">win_rate = total_wins / total_games * <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Win rate over <span class="subst">&#123;test_episodes&#125;</span> episodes: <span class="subst">&#123;win_rate:<span class="number">.2</span>f&#125;</span>%&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制测试奖励分布直方图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line">plt.hist(total_rewards, bins=<span class="number">20</span>, edgecolor=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Total Reward&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Frequency&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Test Reward Distribution&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>agent类代码</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BlackjackAgent.py</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> gymnasium <span class="keyword">as</span> gym</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlackjackAgent</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        env: gym.Env,</span></span><br><span class="line"><span class="params">        learning_rate: <span class="built_in">float</span>,</span></span><br><span class="line"><span class="params">        initial_epsilon: <span class="built_in">float</span>,</span></span><br><span class="line"><span class="params">        epsilon_decay: <span class="built_in">float</span>,</span></span><br><span class="line"><span class="params">        final_epsilon: <span class="built_in">float</span>,</span></span><br><span class="line"><span class="params">        discount_factor: <span class="built_in">float</span> = <span class="number">0.95</span>,</span></span><br><span class="line"><span class="params">    </span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Initialize a Reinforcement Learning agent with an empty dictionary</span></span><br><span class="line"><span class="string">        of state-action values (q_values), a learning rate and an epsilon.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            env: The training environment</span></span><br><span class="line"><span class="string">            learning_rate: The learning rate</span></span><br><span class="line"><span class="string">            initial_epsilon: The initial epsilon value</span></span><br><span class="line"><span class="string">            epsilon_decay: The decay for epsilon</span></span><br><span class="line"><span class="string">            final_epsilon: The final epsilon value</span></span><br><span class="line"><span class="string">            discount_factor: The discount factor for computing the Q-value</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.env = env</span><br><span class="line">        self.q_values = defaultdict(<span class="keyword">lambda</span>: np.zeros(env.action_space.n))</span><br><span class="line"></span><br><span class="line">        self.lr = learning_rate</span><br><span class="line">        self.discount_factor = discount_factor</span><br><span class="line"></span><br><span class="line">        self.epsilon = initial_epsilon</span><br><span class="line">        self.epsilon_decay = epsilon_decay</span><br><span class="line">        self.final_epsilon = final_epsilon</span><br><span class="line"></span><br><span class="line">        self.training_error = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_action</span>(<span class="params">self, obs: <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">bool</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the best action with probability (1 - epsilon)</span></span><br><span class="line"><span class="string">        otherwise a random action with probability epsilon to ensure exploration.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># with probability epsilon return a random action to explore the environment</span></span><br><span class="line">        <span class="keyword">if</span> np.random.random() &lt; self.epsilon:</span><br><span class="line">            <span class="keyword">return</span> self.env.action_space.sample()</span><br><span class="line">        <span class="comment"># with probability (1 - epsilon) act greedily (exploit)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(np.argmax(self.q_values[obs]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        obs: <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">bool</span>],</span></span><br><span class="line"><span class="params">        action: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">        reward: <span class="built_in">float</span>,</span></span><br><span class="line"><span class="params">        terminated: <span class="built_in">bool</span>,</span></span><br><span class="line"><span class="params">        next_obs: <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">bool</span>],</span></span><br><span class="line"><span class="params">    </span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Updates the Q-value of an action.&quot;&quot;&quot;</span></span><br><span class="line">        future_q_value = (<span class="keyword">not</span> terminated) * np.<span class="built_in">max</span>(self.q_values[next_obs])</span><br><span class="line">        temporal_difference = (</span><br><span class="line">            reward + self.discount_factor * future_q_value - self.q_values[obs][action]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.q_values[obs][action] = (</span><br><span class="line">            self.q_values[obs][action] + self.lr * temporal_difference</span><br><span class="line">        )</span><br><span class="line">        self.training_error.append(temporal_difference)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decay_epsilon</span>(<span class="params">self</span>):</span><br><span class="line">        self.epsilon = <span class="built_in">max</span>(self.final_epsilon, self.epsilon - self.epsilon_decay)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><p>测试结果图</p>
<p><a class="link"   href="https://gymnasium.org.cn/introduction/train_agent/" >https://gymnasium.org.cn/introduction/train_agent/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ol>
<li><p>二十一点规则</p>
<p><a class="link"   href="https://gymnasium.org.cn/environments/toy_text/blackjack/" >https://gymnasium.org.cn/environments/toy_text/blackjack/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>具体实现</p>
<ul>
<li><p>训练代码</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gymnasium <span class="keyword">as</span> gym</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> BlackjackAgent <span class="keyword">import</span> BlackjackAgent  <span class="comment"># 导入 BlackjackAgent 类</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置超参数</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">n_episodes = <span class="number">100_000</span></span><br><span class="line">start_epsilon = <span class="number">1.0</span></span><br><span class="line">epsilon_decay = start_epsilon / (n_episodes / <span class="number">2</span>)  <span class="comment"># 逐步减少探索</span></span><br><span class="line">final_epsilon = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建环境</span></span><br><span class="line">env = gym.make(<span class="string">&quot;Blackjack-v1&quot;</span>, sab=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化代理</span></span><br><span class="line">agent = BlackjackAgent(</span><br><span class="line">    env=env,</span><br><span class="line">    learning_rate=learning_rate,</span><br><span class="line">    initial_epsilon=start_epsilon,</span><br><span class="line">    epsilon_decay=epsilon_decay,</span><br><span class="line">    final_epsilon=final_epsilon,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">env = gym.wrappers.RecordEpisodeStatistics(env)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于记录奖励和误差</span></span><br><span class="line">episode_rewards = []</span><br><span class="line">episode_errors = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练过程</span></span><br><span class="line"><span class="keyword">for</span> episode <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(n_episodes)):</span><br><span class="line">    obs, info = env.reset()</span><br><span class="line">    done = <span class="literal">False</span></span><br><span class="line">    total_reward = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> done:</span><br><span class="line">        action = agent.get_action(obs)</span><br><span class="line">        next_obs, reward, terminated, truncated, info = env.step(action)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新代理</span></span><br><span class="line">        agent.update(obs, action, reward, terminated, next_obs)</span><br><span class="line"></span><br><span class="line">        total_reward += reward</span><br><span class="line">        done = terminated <span class="keyword">or</span> truncated</span><br><span class="line">        obs = next_obs</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录每回合的奖励和误差</span></span><br><span class="line">    episode_rewards.append(total_reward)</span><br><span class="line">    episode_errors.append(np.mean(agent.training_error))  <span class="comment"># 记录当前回合的平均误差</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新 epsilon</span></span><br><span class="line">    agent.decay_epsilon()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练完成，绘制奖励和误差曲线</span></span><br><span class="line">fig, (ax1, ax2) = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, figsize=(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制奖励曲线</span></span><br><span class="line">ax1.plot(np.convolve(episode_rewards, np.ones(<span class="number">100</span>)/<span class="number">100</span>, mode=<span class="string">&#x27;valid&#x27;</span>), label=<span class="string">&quot;Total Reward&quot;</span>)</span><br><span class="line">ax1.set_title(<span class="string">&quot;Total Reward Over Episodes&quot;</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">&quot;Episodes&quot;</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">&quot;Reward&quot;</span>)</span><br><span class="line">ax1.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 TD 误差曲线</span></span><br><span class="line">ax2.plot(episode_errors, label=<span class="string">&quot;TD Error&quot;</span>, color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ax2.set_title(<span class="string">&quot;TD Error Over Episodes&quot;</span>)</span><br><span class="line">ax2.set_xlabel(<span class="string">&quot;Episodes&quot;</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">&quot;TD Error&quot;</span>)</span><br><span class="line">ax2.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================== 方法二：测试智能体性能 ================== #</span></span><br><span class="line">test_episodes = <span class="number">1000</span>  <span class="comment"># 运行 1000 回合</span></span><br><span class="line">total_wins = <span class="number">0</span></span><br><span class="line">total_games = <span class="number">0</span></span><br><span class="line">total_rewards = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(test_episodes):</span><br><span class="line">    obs, info = env.reset()</span><br><span class="line">    done = <span class="literal">False</span></span><br><span class="line">    total_reward = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> done:</span><br><span class="line">        action = np.argmax(agent.q_values[obs])  <span class="comment"># 选择最优策略</span></span><br><span class="line">        obs, reward, terminated, truncated, info = env.step(action)</span><br><span class="line">        total_reward += reward</span><br><span class="line">        done = terminated <span class="keyword">or</span> truncated</span><br><span class="line"></span><br><span class="line">    total_rewards.append(total_reward)</span><br><span class="line">    <span class="keyword">if</span> total_reward &gt; <span class="number">0</span>:</span><br><span class="line">        total_wins += <span class="number">1</span></span><br><span class="line">    total_games += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">win_rate = total_wins / total_games * <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Win rate over <span class="subst">&#123;test_episodes&#125;</span> episodes: <span class="subst">&#123;win_rate:<span class="number">.2</span>f&#125;</span>%&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制测试奖励分布直方图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line">plt.hist(total_rewards, bins=<span class="number">20</span>, edgecolor=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Total Reward&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Frequency&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Test Reward Distribution&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div></li>
<li><p>agent类代码</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BlackjackAgent.py</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> gymnasium <span class="keyword">as</span> gym</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlackjackAgent</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        env: gym.Env,</span></span><br><span class="line"><span class="params">        learning_rate: <span class="built_in">float</span>,</span></span><br><span class="line"><span class="params">        initial_epsilon: <span class="built_in">float</span>,</span></span><br><span class="line"><span class="params">        epsilon_decay: <span class="built_in">float</span>,</span></span><br><span class="line"><span class="params">        final_epsilon: <span class="built_in">float</span>,</span></span><br><span class="line"><span class="params">        discount_factor: <span class="built_in">float</span> = <span class="number">0.95</span>,</span></span><br><span class="line"><span class="params">    </span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Initialize a Reinforcement Learning agent with an empty dictionary</span></span><br><span class="line"><span class="string">        of state-action values (q_values), a learning rate and an epsilon.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            env: The training environment</span></span><br><span class="line"><span class="string">            learning_rate: The learning rate</span></span><br><span class="line"><span class="string">            initial_epsilon: The initial epsilon value</span></span><br><span class="line"><span class="string">            epsilon_decay: The decay for epsilon</span></span><br><span class="line"><span class="string">            final_epsilon: The final epsilon value</span></span><br><span class="line"><span class="string">            discount_factor: The discount factor for computing the Q-value</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.env = env</span><br><span class="line">        self.q_values = defaultdict(<span class="keyword">lambda</span>: np.zeros(env.action_space.n))</span><br><span class="line"></span><br><span class="line">        self.lr = learning_rate</span><br><span class="line">        self.discount_factor = discount_factor</span><br><span class="line"></span><br><span class="line">        self.epsilon = initial_epsilon</span><br><span class="line">        self.epsilon_decay = epsilon_decay</span><br><span class="line">        self.final_epsilon = final_epsilon</span><br><span class="line"></span><br><span class="line">        self.training_error = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_action</span>(<span class="params">self, obs: <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">bool</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the best action with probability (1 - epsilon)</span></span><br><span class="line"><span class="string">        otherwise a random action with probability epsilon to ensure exploration.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># with probability epsilon return a random action to explore the environment</span></span><br><span class="line">        <span class="keyword">if</span> np.random.random() &lt; self.epsilon:</span><br><span class="line">            <span class="keyword">return</span> self.env.action_space.sample()</span><br><span class="line">        <span class="comment"># with probability (1 - epsilon) act greedily (exploit)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(np.argmax(self.q_values[obs]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        obs: <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">bool</span>],</span></span><br><span class="line"><span class="params">        action: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">        reward: <span class="built_in">float</span>,</span></span><br><span class="line"><span class="params">        terminated: <span class="built_in">bool</span>,</span></span><br><span class="line"><span class="params">        next_obs: <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">bool</span>],</span></span><br><span class="line"><span class="params">    </span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Updates the Q-value of an action.&quot;&quot;&quot;</span></span><br><span class="line">        future_q_value = (<span class="keyword">not</span> terminated) * np.<span class="built_in">max</span>(self.q_values[next_obs])</span><br><span class="line">        temporal_difference = (</span><br><span class="line">            reward + self.discount_factor * future_q_value - self.q_values[obs][action]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.q_values[obs][action] = (</span><br><span class="line">            self.q_values[obs][action] + self.lr * temporal_difference</span><br><span class="line">        )</span><br><span class="line">        self.training_error.append(temporal_difference)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decay_epsilon</span>(<span class="params">self</span>):</span><br><span class="line">        self.epsilon = <span class="built_in">max</span>(self.final_epsilon, self.epsilon - self.epsilon_decay)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
<li><p>测试结果图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502071006683.png"
                      alt="v"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502071006459.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502071007589.png"
                     
                ></p>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>头文件包含规范</title>
    <url>/2025/02/07/%E5%A4%B4%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p><a class="link"   href="https://stibel.icu/md/method/code-style/code-style-head-file.html" >编码规范 - 头文件包含规范 | C++ 全栈知识体系 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>通过前置声明的方式，减少头文件中依赖的其他头文件。将头文件的包含动作延迟到源文件中去实现。</li>
</ul>
<h2 id="Self-contained-头文件自包含"><a href="#Self-contained-头文件自包含" class="headerlink" title="Self-contained 头文件自包含"></a>Self-contained 头文件自包含</h2><ul>
<li>所有头文件要能够自给自足，即头文件需要包含<strong>本身依赖</strong>的其他头文件。</li>
<li>换言之，用户和重构工具不需要为特别场合而包含额外的头文件。</li>
</ul>
<h2 id="头文件中尽量减少对其他头文件的依赖"><a href="#头文件中尽量减少对其他头文件的依赖" class="headerlink" title="头文件中尽量减少对其他头文件的依赖"></a>头文件中尽量减少对其他头文件的依赖</h2><ul>
<li>头文件包含另一个头文件的同时会引入一项新的依赖(dependency)，这个依赖也会随着该头文件的被包含而扩散出去，从而导致<strong>依赖扩散</strong>。</li>
<li>只要头文件被修改，代码就要重新编译，如果你的头文件包含了其它头文件，<strong>这些头文件的任何改动都将导致那些包含了你的头文件的代码重新编译</strong>。</li>
</ul>
<h3 id="多余的头文件包含"><a href="#多余的头文件包含" class="headerlink" title="多余的头文件包含"></a>多余的头文件包含</h3><ul>
<li>头文件包含必须遵循最少必要原则，尽量少包含。</li>
<li>能包含小的头文件，不包含大的头文件。</li>
<li>及时清理不需要的头文件包含，不能只增不删。</li>
</ul>
<h3 id="可以在source文件包含的，不要包含着头文件中"><a href="#可以在source文件包含的，不要包含着头文件中" class="headerlink" title="可以在source文件包含的，不要包含着头文件中"></a>可以在source文件包含的，不要包含着头文件中</h3><p>例如，Test.h头文件以及对应Test.cpp文件。</p>
<p>Test.h只要包含改头文件所依赖的其他头文件，不能将Test.cpp所需要用到的头文件全都放在Test.h中。</p>
<h3 id="头文件仅声明，不作实现"><a href="#头文件仅声明，不作实现" class="headerlink" title="头文件仅声明，不作实现"></a>头文件仅声明，不作实现</h3><p>如果头文件里包含函数实现，在其他多个源文件中使用include方式包含时，会提示多重定义(multiple definition)</p>
<h3 id="头文件是只包含必要的声明"><a href="#头文件是只包含必要的声明" class="headerlink" title="头文件是只包含必要的声明"></a>头文件是只包含必要的声明</h3><ul>
<li>不是所有函数实现都需要在头文件中声明，只声明需要发布的函数接口。</li>
<li>私有函数不在头文件中声明，从而减少头文件的依赖。例如，某些工具类方法可以声明和实现在.cpp函数的类外。</li>
</ul>
<h3 id="define-保护"><a href="#define-保护" class="headerlink" title="define 保护"></a>define 保护</h3><ul>
<li>所有头文件都应该使用 #define 来防止头文件被多重包含, 命名格式例如:</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> Data_MySQL_MySQLException_INCLUDED#<span class="keyword">define</span> Data_MySQL_MySQLException_INCLUDED</span></span><br><span class="line">        Copied!</span><br></pre></td></tr></table></figure></div>

<p>12</p>
<h3 id="使用前置声明-forward-declarations"><a href="#使用前置声明-forward-declarations" class="headerlink" title="使用前置声明(forward declarations)"></a>使用前置声明(forward declarations)</h3><ul>
<li>「前置声明」（forward declaration）是类、函数和模板的纯粹声明，没伴随着其定义.</li>
</ul>
<p>看法一：</p>
<ul>
<li>尽可能地避免使用前置声明。使用 #include 包含需要的头文件即可。</li>
<li>前置声明隐藏了依赖关系，头文件改动时，用户的代码会跳过必要的重新编译过程。</li>
</ul>
<p>看法二：</p>
<ul>
<li>通过前置声明的方式，减少头文件中依赖的其他头文件。将头文件的包含动作延迟到源文件中去实现。</li>
<li>使用场景：头文件只用到对应内容的指针或引用不涉及具体内容。或用到一个结构体声明，但不想包一个很大的头文件将依赖扩散。（struct Foo;在源文件中#include &lt;Foo.h&gt;）</li>
</ul>
<p>可以参考：<a class="link"   href="https://www.notion.so/md/c++/tips/c++-tips-forward-declaration.html" >C++前置声明 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="避免错误依赖和反向依赖"><a href="#避免错误依赖和反向依赖" class="headerlink" title="避免错误依赖和反向依赖"></a>避免错误依赖和反向依赖</h2><ul>
<li>包含每个头文件时，需要分析是不是合适的依赖，避免包含错误的头文件，导致其依赖的其他头文件项变多。</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//log.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;logType.h&gt;</span>#<span class="keyword">include</span><span class="string">&lt;logTime.h&gt;</span><span class="comment">//不应该包含项</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;message.h&gt;</span>#<span class="keyword">include</span><span class="string">&lt;httpType.h&gt;</span></span></span><br><span class="line">        Copied!</span><br></pre></td></tr></table></figure></div>

<p>12345678</p>
<h2 id="尽可能将代码拆分成相对独立的，粒度小的单元，放到不同的文件中"><a href="#尽可能将代码拆分成相对独立的，粒度小的单元，放到不同的文件中" class="headerlink" title="尽可能将代码拆分成相对独立的，粒度小的单元，放到不同的文件中"></a>尽可能将代码拆分成相对独立的，粒度小的单元，放到不同的文件中</h2><ul>
<li>不能使得一个类代码很臃肿，包含特别多的功能，不方便维护。</li>
<li>通过拆分成小的，独立的模块更利于维护。</li>
</ul>
<h2 id="包含头文件顺序"><a href="#包含头文件顺序" class="headerlink" title="包含头文件顺序"></a>包含头文件顺序</h2><p>头文件Test.h和源文件Test.cpp，对应的头文件包含顺序都需要满足：</p>
<ol>
<li>Test.h （如果自己定义的头文件有错，编译时会提前暴露自身的错误而不是其他库的。）</li>
<li>本项目内的.h文件</li>
<li>其它库的.h文件</li>
<li>C系统文件</li>
<li>C++系统文件</li>
</ol>
<p>没有唯一的标准，都是适合自己的习惯，google C++ 头文件顺序：</p>
<ol>
<li>主体功能文件（这一条规则保证维护这些文件的人们首先看到构建中止的消息而不是维护其他包的人们。）</li>
<li>C系统文件</li>
<li>C++系统文件</li>
<li>其它库的.h文件</li>
<li>本项目内的.h文件</li>
</ol>
<h2 id="包含头文件时，使用源码的目录树结构，不使用相对路径"><a href="#包含头文件时，使用源码的目录树结构，不使用相对路径" class="headerlink" title="包含头文件时，使用源码的目录树结构，不使用相对路径"></a>包含头文件时，使用源码的目录树结构，不使用相对路径</h2><p>使用源码的目录树结构，而不是相对路径：</p>
<ul>
<li>为保证唯一性, 头文件的命名应该基于所在项目源代码树的全路径</li>
<li>#include &lt;drogon&#x2F;orm&#x2F;Result.h&gt; √</li>
<li>#include &lt;..&#x2F;..&#x2F;Result.h&gt; ×</li>
</ul>
<h2 id="头文件中不允许使用using-namespace-XXX·措施"><a href="#头文件中不允许使用using-namespace-XXX·措施" class="headerlink" title="头文件中不允许使用using namespace XXX·措施"></a>头文件中不允许使用using namespace XXX·措施</h2><ul>
<li>头文件使用 <code>using namespace XXX</code> 会破坏 namespace 的封装性</li>
<li>因为头文件会被包含在其他的头文件和cpp文件中。导致C++编译器将头文件字符串直接拷贝，强制其他的头文件也使用 <code>using namespace XXX</code>,从而引起编译错误，或者使用错误的类型，造成麻烦。</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正例</span></span><br><span class="line"><span class="keyword">namespace</span> HttpProxy&#123;</span><br><span class="line">    <span class="keyword">using</span> Poco::ByteOrder;</span><br><span class="line">    <span class="keyword">using</span> Poco::UInt16;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> HttpProxy&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> Poco;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        Copied!</span><br></pre></td></tr></table></figure></div>

<h1 id="保证措施"><a href="#保证措施" class="headerlink" title="保证措施"></a>保证措施</h1><ul>
<li>代码扫描工具识别多余包含</li>
<li>Code Review发现头文件包含是否规范</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>强化学习基本概念</title>
    <url>/2025/02/07/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h3 id="0-综述类网站与文章"><a href="#0-综述类网站与文章" class="headerlink" title="0.综述类网站与文章"></a>0.综述类网站与文章</h3><p><a href="https://spinningup.openai.com/en/latest/spinningup/spinningup.html#id49"><strong>Spinning Up as a Deep RL Researcher</strong></a></p>
<p><a class="link"   href="https://lilianweng.github.io/posts/2018-02-19-rl-overview/" >A (Long) Peek into Reinforcement Learning <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="1-Key-Concepts"><a href="#1-Key-Concepts" class="headerlink" title="1. Key Concepts"></a>1. Key Concepts</h2><p><strong>environment  环境</strong></p>
<p><strong>model</strong> 描述环境如何对特定动作做出反应（control里面的传函和状态传递方程）</p>
<p><strong>states</strong> 一般写作 s</p>
<p><strong>actions</strong> 一般写作 a</p>
<p><strong>reward</strong>  环境会提供奖励 （r∈R） 作为反馈。</p>
<p><strong>P</strong>    transition probabilities between states</p>
<p><strong>agent</strong> 智能体，与环境交互并进行控制的主体</p>
<p><strong>policy</strong> 一般写作π(s)， 告诉我们在状态 s 中要采取什么行动。它是从状态 s 到作 a 的映射，可以是确定性的，也可以是随机的,目的是最大化总奖励，也就是下面说的value.</p>
<blockquote>
<p>策略本质上是一个概率分布，πθ(a∣s)\pi_\theta(a | s)πθ(a∣s) 直接给出了每个动作的概率</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070949865.png"
                      alt="image-20250207094931820"
                ></p>
<p>value 目标指标，量化了一个 policy 的好坏， control  里的代价函数可以算是一种 value</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070950401.png"
                      alt="image-20250207095002356"
                ></p>
<p><strong>episode 在agent和环境交互中不断积累关于环境的知识，学习最佳策略。系统的变化过程构成一个交互序列，或者叫trial 、trajectory</strong></p>
<p>transition probability function 转移概率函数 P  &amp; reward function  奖励函数 R</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070950407.png"
                      alt="image-20250207095022364"
                ></p>
<p><strong>action-value Q 值</strong></p>
<p>可以把 Q(s,a)Q(s, a)Q(s,a) 理解为：</p>
<p>处于某个状态 s 时，如果执行动作 a，那么未来能得到多少奖励；是对 <strong>“选择这个动作值得吗？”</strong> 这个问题的量化评估。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070950757.png"
                      alt="image-20250207095041716"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070950180.png"
                      alt="image-20250207095050144"
                ></p>
<h2 id="2-Basic-Approaches"><a href="#2-Basic-Approaches" class="headerlink" title="2. Basic Approaches"></a>2. Basic Approaches</h2><ol>
<li><p>DP方法   Dynamic Approach <strong>动态规划</strong></p>
<p>模型完全已知时，按照 Bellman 方程，我们可以使用动态规划 （DP） 迭代评估价值函数并改进策略。</p>
<ol>
<li>策略评估</li>
<li>策略改进</li>
<li>策略迭代 <em>Generalized Policy Iteration (GPI)</em> algorithm</li>
</ol>
</li>
<li><p>MC方法 <strong>Monte-Carlo Methods</strong></p>
</li>
</ol>
<blockquote>
<p>蒙特卡洛 （MC） 方法使用一个简单的想法：它从原始经验中学习，而不对环境动态进行建模，并将观察到的平均回报计算为预期回报的近似值。</p>
</blockquote>
<ol start="3">
<li><p>TD方法 <strong>Temporal-Difference Learning</strong></p>
<p>无模型、从经验中学习</p>
<p>但是相较于MC方法不需要完整的 episode</p>
<p>TD 学习方法根据现有估计更新目标，而不是像 MC 方法那样完全依赖实际奖励和完整回报。这种方法称为 bootstrapping。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202502070953953.png"
                      alt="image-20250207095304901"
                ></p>
</li>
</ol>
<h2 id="3-MDP过程"><a href="#3-MDP过程" class="headerlink" title="3. MDP过程"></a>3. MDP过程</h2><p>更正式地说，几乎所有的 RL 问题都可以被框定为马尔可夫决策过程 （MDP）。MDP 中的所有状态都具有 “Markov” 属性，指的是 future 只取决于当前状态，而不取决于历史的事实：</p>
<p>P[St+1|St]&#x3D;P[St+1|S1,…,St]</p>
<p>或者换句话说，鉴于现在，未来和过去在条件上是独立的，因为当前状态封装了我们决定未来所需的所有统计数据。</p>
<p>马尔可夫定义过程由五个元素 M&#x3D;⟨S,A,P,R,γ⟩ 组成，其中符号与上一节中的关键概念具有相同的含义，与 RL 问题设置非常一致</p>
<p><a class="link"   href="https://www.jeremykun.com/2015/04/06/markov-chain-monte-carlo-without-all-the-bullshit/" >Markov Chain Monte Carlo Without all the Bullshit <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>开关电路及其仿真</title>
    <url>/2023/09/02/%E5%BC%80%E5%85%B3%E7%94%B5%E8%B7%AF%E5%8F%8A%E5%85%B6%E4%BB%BF%E7%9C%9F/</url>
    <content><![CDATA[<ol>
<li><p>开关电路的介绍</p>
<p>可以在很高的效率下完成电压的升降 常用的有BUCK BOOST电路</p>
<p>开关电路一般来说只适用于高频电路</p>
</li>
<li><p>BUCK电路</p>
</li>
</ol>
<p>通过开关MOSEFT管的占空比来调节整个PWM波的占空比，再加上电感电容的高通滤波器，就可以输出稳定的降压</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261132218.png"
                      alt="image-20230801160945792"
                ></p>
<ol start="3">
<li><p>BOOST简化电路</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261132382.png"
                      alt="image-20230801161121460"
                ></p>
</li>
</ol>
<p>[1]: <a class="link"   href="https://blog.csdn.net/lg2lh/article/details/24369903" >https://blog.csdn.net/lg2lh/article/details/24369903 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>	“”关于伏秒平衡””</p>
<p><a class="link"   href="https://blog.csdn.net/weixin_43381663/article/details/129694870" >【电源】DC-DC电路中的伏秒平衡原理 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>利用好第一阶段给电感储能，再在第二阶段使得电感和电源同时给输出端提供电压，使得输出电压要更大。而在第一阶段中，输出电压就由电容来维持</p>
<ol start="4">
<li><p>BUCK-BOOST电路</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202501261133846.png"
                      alt="image-20230801162509696"
                ></p>
</li>
</ol>
<p>可以方便地调节了</p>
<p>若一直关闭Q8打开Q7，则成为BUCK电路</p>
<p>若一直关闭Q5打开Q6，则称为BOOST电路</p>
<blockquote>
<p>桥臂在电源端就是BUCK,在输出端就是BOOST</p>
</blockquote>
]]></content>
      <tags>
        <tag>电子技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes for Control Design Example of Antenna chap1-5</title>
    <url>/2025/06/09/Notes%20for%20Control%20Design%20example%20for%20antenna/</url>
    <content><![CDATA[<blockquote>
<p>JPL实验室做深空探测天线的那帮家伙弄出来的控制系统设计全流程，从系统建模、扰动建模、参数辨识、控制器设计一应俱全，很有启发意义的</p>
</blockquote>
<h1 id="1-Short-Description-of-the-Antenna-Control-System"><a href="#1-Short-Description-of-the-Antenna-Control-System" class="headerlink" title="1.Short Description of the Antenna Control System"></a>1.Short Description of the Antenna Control System</h1><h2 id="1-1-组成"><a href="#1-1-组成" class="headerlink" title="1.1 组成"></a>1.1 组成</h2><p>The antenna controller consists of two independent subsystems: azimuth and elevation controllers  （转台或者就是云台）</p>
<p>azimuth (vertical)</p>
<p>elevation (horizontal)</p>
<h2 id="1-2-控制框图"><a href="#1-2-控制框图" class="headerlink" title="1.2 控制框图"></a>1.2 控制框图</h2><p>Velocity Loop:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202506082111853.png"
                      alt="image-20250608211111780"
                ></p>
<p>Position-Loop</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202506082111657.png"
                      alt="image-20250608211152610"
                ></p>
<h1 id="2-MODELING"><a href="#2-MODELING" class="headerlink" title="2. MODELING"></a>2. MODELING</h1><h2 id="2-1-Analytical-Models"><a href="#2-1-Analytical-Models" class="headerlink" title="2.1 Analytical Models"></a>2.1 Analytical Models</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202506082113812.png"
                      alt="image-20250608211313780"
                ></p>
<h3 id="2-1-1-Structural-Model"><a href="#2-1-1-Structural-Model" class="headerlink" title="2.1.1 Structural Model"></a>2.1.1 Structural Model</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202506082113041.png"
                      alt="image-20250608211346020"
                ></p>
<h3 id="2-1-2-Drive-Model"><a href="#2-1-2-Drive-Model" class="headerlink" title="2.1.2 Drive Model"></a>2.1.2 Drive Model</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202506082114495.png"
                      alt="image-20250608211408466"
                ></p>
<h2 id="2-2-Models-from-Identification"><a href="#2-2-Models-from-Identification" class="headerlink" title="2.2 Models from Identification"></a>2.2 Models from Identification</h2><blockquote>
<p>The white noise is a random signal of even spectrum within the antenna bandwidth; hence each frequency component of the antenna dynamics is excited evenly</p>
</blockquote>
<p><strong>White Noise Testing of the Antenna</strong></p>
<blockquote>
<p>The sweep-sine excites antenna resonances, causing wear, and excites antenna backlash since resonance forces exceed antibacklash torques.</p>
</blockquote>
<p>主要是担心结构磨损和反冲backlash</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202506082115064.png"
                      alt="image-20250608211539011"
                ></p>
<h3 id="2-2-1-Open-loop-test"><a href="#2-2-1-Open-loop-test" class="headerlink" title="2.2.1 Open loop test"></a>2.2.1 Open loop test</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202506082115942.png"
                      alt="image-20250608211557908"
                ></p>
<h3 id="2-2-2-Closed-loop-test"><a href="#2-2-2-Closed-loop-test" class="headerlink" title="2.2.2 Closed loop test"></a>2.2.2 Closed loop test</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202506082116945.png"
                      alt="image-20250608211614912"
                ></p>
<h2 id="2-3-Model-Reduction"><a href="#2-3-Model-Reduction" class="headerlink" title="2.3 Model Reduction"></a>2.3 Model Reduction</h2><p>Additionally, the measurement noise is included in the model</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202506082117918.jpg"
                      alt="5d58a8662348f41efac437c9d4b8c2a"
                ></p>
<h3 id="Balanced-Model-Reduction-with-Hankel-singular-values-HSV"><a href="#Balanced-Model-Reduction-with-Hankel-singular-values-HSV" class="headerlink" title="Balanced Model Reduction   with Hankel singular values (HSV)"></a>Balanced Model Reduction   with Hankel singular values (HSV)</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202506082118735.png"
                      alt="image-20250608211820687"
                ></p>
<h3 id="HANKEL-MATRIX"><a href="#HANKEL-MATRIX" class="headerlink" title="HANKEL MATRIX"></a>HANKEL MATRIX</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202506082118464.png"
                      alt="image-20250608211842410"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202506082118504.png"
                      alt="image-20250608211857429"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/POCRO/myPic/pics/202506082119605.png"
                      alt="image-20250608211906555"
                ></p>
]]></content>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo建站指南</title>
    <url>/2025/06/11/hexo%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="1-hexo本体使用"><a href="#1-hexo本体使用" class="headerlink" title="1. hexo本体使用"></a>1. hexo本体使用</h1><p><a class="link"   href="https://hexo.io/zh-cn/" >Hexo官网
 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/60578464" >使用 Hexo+GitHub 搭建个人免费博客教程（小白向） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_45631738/article/details/104716374" >hexo+gitee(码云)搭建个人博客避开所有坑 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="2-好康的主题"><a href="#2-好康的主题" class="headerlink" title="2. 好康的主题"></a>2. 好康的主题</h1><p><a class="link"   href="https://redefine-docs.ohevan.com/zh/getting-started" >Redfine <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://b143kc47.github.io/VSC4T/" >VSC4T <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="3-PicGo图床加速与vscode插件"><a href="#3-PicGo图床加速与vscode插件" class="headerlink" title="3. PicGo图床加速与vscode插件"></a>3. PicGo图床加速与vscode插件</h1><p><a class="link"   href="https://picgo.github.io/PicGo-Doc/zh/" >PicGo官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.erenship.com/posts/db37.html" >Hexo 博客站点加速不完全指南 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/610566015" >VScode+Markdown+PicGo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/489236769" >使用Github+picGo搭建图床，保姆级教程来了 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>vscode markdown环境中直接插入图传到Picgo的快捷键</p>
<p>ctr alt u</p>
]]></content>
      <tags>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
  <entry>
    <title>win+ubuntu双系统键鼠共用</title>
    <url>/2025/06/12/win+ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E9%94%AE%E9%BC%A0%E5%85%B1%E7%94%A8/</url>
    <content><![CDATA[<h1 id="0-Barrier"><a href="#0-Barrier" class="headerlink" title="0 .Barrier"></a>0 .Barrier</h1><blockquote>
<p>Eliminate the barrier between your machines. Find <a class="link"   href="https://github.com/debauchee/barrier/releases" >releases for windows and macOS here <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. Your distro probably already has barrier packaged for it, see <a class="link"   href="https://github.com/debauchee/barrier#distro-specific-packages" >distro specific packages <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> below for a list. Alternatively, we also provide a <a class="link"   href="https://github.com/flathub/com.github.debauchee.barrier" >flatpak <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and a <a class="link"   href="https://snapcraft.io/barrier" >snap <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
</blockquote>
<h1 id="1-windows服务器端配置"><a href="#1-windows服务器端配置" class="headerlink" title="1. windows服务器端配置"></a>1. windows服务器端配置</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/POCRO/myPic/main/pics20250612104536.png"
                      alt="20250612104536"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/POCRO/myPic/main/pics20250612104554.png"
                      alt="20250612104554"
                ></p>
<p>注意要取消勾选开启SSL选项</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/POCRO/myPic/main/pics20250612104616.png"
                      alt="20250612104616"
                ></p>
<p>注意这里右侧屏幕名要与客户端的实际名字一致！</p>
<p>另外应当调整DPI设置</p>
<p><a class="link"   href="https://blog.csdn.net/weixin_42683670/article/details/140374278" >光标消失bug <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="2-ubuntu客户端配置"><a href="#2-ubuntu客户端配置" class="headerlink" title="2. ubuntu客户端配置"></a>2. ubuntu客户端配置</h1><p>安装很简单</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">sudo apt install barrier</span><br></pre></td></tr></table></figure></div>

<p>命令行里直接barrier就可以启动</p>
]]></content>
      <tags>
        <tag>奇技淫巧</tag>
      </tags>
  </entry>
</search>
